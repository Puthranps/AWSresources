[ :ref:`aws <cli:aws>` . :ref:`rekognition <cli:aws rekognition>` ]

.. _cli:aws rekognition index-faces:


***********
index-faces
***********



===========
Description
===========



Detects faces in the input image and adds them to the specified collection. 

 

Amazon Rekognition doesn't save the actual faces that are detected. Instead, the underlying detection algorithm first detects the faces in the input image. For each face, the algorithm extracts facial features into a feature vector, and stores it in the backend database. Amazon Rekognition uses feature vectors when it performs face match and search operations using the and operations.

 

For more information, see Adding Faces to a Collection in the Amazon Rekognition Developer Guide.

 

To get the number of faces in a collection, call . 

 

If you're using version 1.0 of the face detection model, ``IndexFaces`` indexes the 15 largest faces in the input image. Later versions of the face detection model index the 100 largest faces in the input image. To determine which version of the model you're using, call and supply the collection ID. You can also get the model version from the value of ``FaceModelVersion`` in the response from ``IndexFaces`` . 

 

For more information, see Model Versioning in the Amazon Rekognition Developer Guide.

 

If you provide the optional ``ExternalImageID`` for the input image you provided, Amazon Rekognition associates this ID with all faces that it detects. When you call the operation, the response returns the external ID. You can use this external image ID to create a client-side index to associate the faces with each image. You can then use the index to find all faces in an image.

 

You can specify the maximum number of faces to index with the ``MaxFaces`` input parameter. This is useful when you want to index the largest faces in an image and don't want to index smaller faces, such as those belonging to people standing in the background.

 

The ``QualityFilter`` input parameter allows you to filter out detected faces that don’t meet the required quality bar chosen by Amazon Rekognition. The quality bar is based on a variety of common use cases. By default, ``IndexFaces`` filters detected faces. You can also explicitly filter detected faces by specifying ``AUTO`` for the value of ``QualityFilter`` . If you do not want to filter detected faces, specify ``NONE`` . 

 

.. note::

   

  To use quality filtering, you need a collection associated with version 3 of the face model. To get the version of the face model associated with a collection, call . 

   

 

Information about faces detected in an image, but not indexed, is returned in an array of objects, ``UnindexedFaces`` . Faces aren't indexed for reasons such as:

 

 
* The number of faces detected exceeds the value of the ``MaxFaces`` request parameter. 
 
* The face is too small compared to the image dimensions. 
 
* The face is too blurry. 
 
* The image is too dark. 
 
* The face has an extreme pose. 
 

 

In response, the ``IndexFaces`` operation returns an array of metadata for all detected faces, ``FaceRecords`` . This includes: 

 

 
* The bounding box, ``BoundingBox`` , of the detected face.  
 
* A confidence value, ``Confidence`` , which indicates the confidence that the bounding box contains a face. 
 
* A face ID, ``faceId`` , assigned by the service for each face that's detected and stored. 
 
* An image ID, ``ImageId`` , assigned by the service for the input image. 
 

 

If you request all facial attributes (by using the ``detectionAttributes`` parameter), Amazon Rekognition returns detailed facial attributes, such as facial landmarks (for example, location of eye and mouth) and other facial attributes like gender. If you provide the same image, specify the same collection, and use the same external ID in the ``IndexFaces`` operation, Amazon Rekognition doesn't save duplicate face metadata.

 



 

The input image is passed either as base64-encoded image bytes, or as a reference to an image in an Amazon S3 bucket. If you use the AWS CLI to call Amazon Rekognition operations, passing image bytes isn't supported. The image must be formatted as a PNG or JPEG file. 

 

This operation requires permissions to perform the ``rekognition:IndexFaces`` action.



See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/rekognition-2016-06-27/IndexFaces>`_

See :doc:`'aws help' </reference/index>` for descriptions of global parameters.


========
Synopsis
========

::

    index-faces
  --collection-id <value>
  [--image <value>]
  [--external-image-id <value>]
  [--detection-attributes <value>]
  [--max-faces <value>]
  [--quality-filter <value>]
  [--image-bytes <value>]
  [--cli-input-json <value>]
  [--generate-cli-skeleton <value>]




=======
Options
=======

``--collection-id`` (string)


  The ID of an existing collection to which you want to add the faces that are detected in the input images.

  

``--image`` (structure)


  The input image as base64-encoded bytes or an S3 object. If you use the AWS CLI to call Amazon Rekognition operations, passing base64-encoded image bytes isn't supported. 

  

  To specify a local file use ``--image-bytes`` instead.

  



Shorthand Syntax::

    Bytes=blob,S3Object={Bucket=string,Name=string,Version=string}




JSON Syntax::

  {
    "Bytes": blob,
    "S3Object": {
      "Bucket": "string",
      "Name": "string",
      "Version": "string"
    }
  }



``--external-image-id`` (string)


  The ID you want to assign to all the faces detected in the image.

  

``--detection-attributes`` (list)


  An array of facial attributes that you want to be returned. This can be the default list of attributes or all attributes. If you don't specify a value for ``Attributes`` or if you specify ``["DEFAULT"]`` , the API returns the following subset of facial attributes: ``BoundingBox`` , ``Confidence`` , ``Pose`` , ``Quality`` , and ``Landmarks`` . If you provide ``["ALL"]`` , all facial attributes are returned, but the operation takes longer to complete.

   

  If you provide both, ``["ALL", "DEFAULT"]`` , the service uses a logical AND operator to determine which attributes to return (in this case, all attributes). 

  



Syntax::

  "string" "string" ...

  Where valid values are:
    DEFAULT
    ALL





``--max-faces`` (integer)


  The maximum number of faces to index. The value of ``MaxFaces`` must be greater than or equal to 1. ``IndexFaces`` returns no more than 100 detected faces in an image, even if you specify a larger value for ``MaxFaces`` .

   

  If ``IndexFaces`` detects more faces than the value of ``MaxFaces`` , the faces with the lowest quality are filtered out first. If there are still more faces than the value of ``MaxFaces`` , the faces with the smallest bounding boxes are filtered out (up to the number that's needed to satisfy the value of ``MaxFaces`` ). Information about the unindexed faces is available in the ``UnindexedFaces`` array. 

   

  The faces that are returned by ``IndexFaces`` are sorted by the largest face bounding box size to the smallest size, in descending order.

   

   ``MaxFaces`` can be used with a collection associated with any version of the face model.

  

``--quality-filter`` (string)


  A filter that specifies how much filtering is done to identify faces that are detected with low quality. Filtered faces aren't indexed. If you specify ``AUTO`` , filtering prioritizes the identification of faces that don’t meet the required quality bar chosen by Amazon Rekognition. The quality bar is based on a variety of common use cases. Low-quality detections can occur for a number of reasons. Some examples are an object that's misidentified as a face, a face that's too blurry, or a face with a pose that's too extreme to use. If you specify ``NONE`` , no filtering is performed. The default value is AUTO.

   

  To use quality filtering, the collection you are using must be associated with version 3 of the face model.

  

  Possible values:

  
  *   ``NONE``

  
  *   ``AUTO``

  

  

``--image-bytes`` (blob)


  The content of the image to be uploaded. To specify the content of a local file use the fileb:// prefix. Example: fileb://image.png

  

``--cli-input-json`` (string)
Performs service operation based on the JSON string provided. The JSON string follows the format provided by ``--generate-cli-skeleton``. If other arguments are provided on the command line, the CLI values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally.

``--generate-cli-skeleton`` (string)
Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value ``input``, prints a sample input JSON that can be used as an argument for ``--cli-input-json``. If provided with the value ``output``, it validates the command inputs and returns a sample output JSON for that command.


See :doc:`'aws help' </reference/index>` for descriptions of global parameters.


======
Output
======

FaceRecords -> (list)

  

  An array of faces detected and added to the collection. For more information, see Searching Faces in a Collection in the Amazon Rekognition Developer Guide. 

  

  (structure)

    

    Object containing both the face metadata (stored in the backend database), and facial attributes that are detected but aren't stored in the database.

    

    Face -> (structure)

      

      Describes the face properties such as the bounding box, face ID, image ID of the input image, and external image ID that you assigned. 

      

      FaceId -> (string)

        

        Unique identifier that Amazon Rekognition assigns to the face.

        

        

      BoundingBox -> (structure)

        

        Bounding box of the face.

        

        Width -> (float)

          

          Width of the bounding box as a ratio of the overall image width.

          

          

        Height -> (float)

          

          Height of the bounding box as a ratio of the overall image height.

          

          

        Left -> (float)

          

          Left coordinate of the bounding box as a ratio of overall image width.

          

          

        Top -> (float)

          

          Top coordinate of the bounding box as a ratio of overall image height.

          

          

        

      ImageId -> (string)

        

        Unique identifier that Amazon Rekognition assigns to the input image.

        

        

      ExternalImageId -> (string)

        

        Identifier that you assign to all the faces in the input image.

        

        

      Confidence -> (float)

        

        Confidence level that the bounding box contains a face (and not a different object such as a tree).

        

        

      

    FaceDetail -> (structure)

      

      Structure containing attributes of the face that the algorithm detected.

      

      BoundingBox -> (structure)

        

        Bounding box of the face. Default attribute.

        

        Width -> (float)

          

          Width of the bounding box as a ratio of the overall image width.

          

          

        Height -> (float)

          

          Height of the bounding box as a ratio of the overall image height.

          

          

        Left -> (float)

          

          Left coordinate of the bounding box as a ratio of overall image width.

          

          

        Top -> (float)

          

          Top coordinate of the bounding box as a ratio of overall image height.

          

          

        

      AgeRange -> (structure)

        

        The estimated age range, in years, for the face. Low represents the lowest estimated age and High represents the highest estimated age.

        

        Low -> (integer)

          

          The lowest estimated age.

          

          

        High -> (integer)

          

          The highest estimated age.

          

          

        

      Smile -> (structure)

        

        Indicates whether or not the face is smiling, and the confidence level in the determination.

        

        Value -> (boolean)

          

          Boolean value that indicates whether the face is smiling or not.

          

          

        Confidence -> (float)

          

          Level of confidence in the determination.

          

          

        

      Eyeglasses -> (structure)

        

        Indicates whether or not the face is wearing eye glasses, and the confidence level in the determination.

        

        Value -> (boolean)

          

          Boolean value that indicates whether the face is wearing eye glasses or not.

          

          

        Confidence -> (float)

          

          Level of confidence in the determination.

          

          

        

      Sunglasses -> (structure)

        

        Indicates whether or not the face is wearing sunglasses, and the confidence level in the determination.

        

        Value -> (boolean)

          

          Boolean value that indicates whether the face is wearing sunglasses or not.

          

          

        Confidence -> (float)

          

          Level of confidence in the determination.

          

          

        

      Gender -> (structure)

        

        Gender of the face and the confidence level in the determination.

        

        Value -> (string)

          

          Gender of the face.

          

          

        Confidence -> (float)

          

          Level of confidence in the determination.

          

          

        

      Beard -> (structure)

        

        Indicates whether or not the face has a beard, and the confidence level in the determination.

        

        Value -> (boolean)

          

          Boolean value that indicates whether the face has beard or not.

          

          

        Confidence -> (float)

          

          Level of confidence in the determination.

          

          

        

      Mustache -> (structure)

        

        Indicates whether or not the face has a mustache, and the confidence level in the determination.

        

        Value -> (boolean)

          

          Boolean value that indicates whether the face has mustache or not.

          

          

        Confidence -> (float)

          

          Level of confidence in the determination.

          

          

        

      EyesOpen -> (structure)

        

        Indicates whether or not the eyes on the face are open, and the confidence level in the determination.

        

        Value -> (boolean)

          

          Boolean value that indicates whether the eyes on the face are open.

          

          

        Confidence -> (float)

          

          Level of confidence in the determination.

          

          

        

      MouthOpen -> (structure)

        

        Indicates whether or not the mouth on the face is open, and the confidence level in the determination.

        

        Value -> (boolean)

          

          Boolean value that indicates whether the mouth on the face is open or not.

          

          

        Confidence -> (float)

          

          Level of confidence in the determination.

          

          

        

      Emotions -> (list)

        

        The emotions detected on the face, and the confidence level in the determination. For example, HAPPY, SAD, and ANGRY. 

        

        (structure)

          

          The emotions detected on the face, and the confidence level in the determination. For example, HAPPY, SAD, and ANGRY.

          

          Type -> (string)

            

            Type of emotion detected.

            

            

          Confidence -> (float)

            

            Level of confidence in the determination.

            

            

          

        

      Landmarks -> (list)

        

        Indicates the location of landmarks on the face. Default attribute.

        

        (structure)

          

          Indicates the location of the landmark on the face.

          

          Type -> (string)

            

            Type of landmark.

            

            

          X -> (float)

            

            The x-coordinate from the top left of the landmark expressed as the ratio of the width of the image. For example, if the image is 700 x 200 and the x-coordinate of the landmark is at 350 pixels, this value is 0.5. 

            

            

          Y -> (float)

            

            The y-coordinate from the top left of the landmark expressed as the ratio of the height of the image. For example, if the image is 700 x 200 and the y-coordinate of the landmark is at 100 pixels, this value is 0.5.

            

            

          

        

      Pose -> (structure)

        

        Indicates the pose of the face as determined by its pitch, roll, and yaw. Default attribute.

        

        Roll -> (float)

          

          Value representing the face rotation on the roll axis.

          

          

        Yaw -> (float)

          

          Value representing the face rotation on the yaw axis.

          

          

        Pitch -> (float)

          

          Value representing the face rotation on the pitch axis.

          

          

        

      Quality -> (structure)

        

        Identifies image brightness and sharpness. Default attribute.

        

        Brightness -> (float)

          

          Value representing brightness of the face. The service returns a value between 0 and 100 (inclusive). A higher value indicates a brighter face image.

          

          

        Sharpness -> (float)

          

          Value representing sharpness of the face. The service returns a value between 0 and 100 (inclusive). A higher value indicates a sharper face image.

          

          

        

      Confidence -> (float)

        

        Confidence level that the bounding box contains a face (and not a different object such as a tree). Default attribute.

        

        

      

    

  

OrientationCorrection -> (string)

  

  The orientation of the input image (counterclockwise direction). If your application displays the image, you can use this value to correct image orientation. The bounding box coordinates returned in ``FaceRecords`` represent face locations before the image orientation is corrected. 

   

  .. note::

     

    If the input image is in jpeg format, it might contain exchangeable image (Exif) metadata. If so, and the Exif metadata populates the orientation field, the value of ``OrientationCorrection`` is null. The bounding box coordinates in ``FaceRecords`` represent face locations after Exif metadata is used to correct the image orientation. Images in .png format don't contain Exif metadata.

     

  

  

FaceModelVersion -> (string)

  

  The version number of the face detection model that's associated with the input collection (``CollectionId`` ).

  

  

UnindexedFaces -> (list)

  

  An array of faces that were detected in the image but weren't indexed. They weren't indexed because the quality filter identified them as low quality, or the ``MaxFaces`` request parameter filtered them out. To use the quality filter, you specify the ``QualityFilter`` request parameter.

  

  (structure)

    

    A face that detected, but didn't index. Use the ``Reasons`` response attribute to determine why a face wasn't indexed.

    

    Reasons -> (list)

      

      An array of reasons that specify why a face wasn't indexed. 

       

       
      * EXTREME_POSE - The face is at a pose that can't be detected. For example, the head is turned too far away from the camera. 
       
      * EXCEEDS_MAX_FACES - The number of faces detected is already higher than that specified by the ``MaxFaces`` input parameter for ``IndexFaces`` . 
       
      * LOW_BRIGHTNESS - The image is too dark. 
       
      * LOW_SHARPNESS - The image is too blurry. 
       
      * LOW_CONFIDENCE - The face was detected with a low confidence. 
       
      * SMALL_BOUNDING_BOX - The bounding box around the face is too small. 
       

      

      (string)

        

        

      

    FaceDetail -> (structure)

      

      The structure that contains attributes of a face that ``IndexFaces`` detected, but didn't index. 

      

      BoundingBox -> (structure)

        

        Bounding box of the face. Default attribute.

        

        Width -> (float)

          

          Width of the bounding box as a ratio of the overall image width.

          

          

        Height -> (float)

          

          Height of the bounding box as a ratio of the overall image height.

          

          

        Left -> (float)

          

          Left coordinate of the bounding box as a ratio of overall image width.

          

          

        Top -> (float)

          

          Top coordinate of the bounding box as a ratio of overall image height.

          

          

        

      AgeRange -> (structure)

        

        The estimated age range, in years, for the face. Low represents the lowest estimated age and High represents the highest estimated age.

        

        Low -> (integer)

          

          The lowest estimated age.

          

          

        High -> (integer)

          

          The highest estimated age.

          

          

        

      Smile -> (structure)

        

        Indicates whether or not the face is smiling, and the confidence level in the determination.

        

        Value -> (boolean)

          

          Boolean value that indicates whether the face is smiling or not.

          

          

        Confidence -> (float)

          

          Level of confidence in the determination.

          

          

        

      Eyeglasses -> (structure)

        

        Indicates whether or not the face is wearing eye glasses, and the confidence level in the determination.

        

        Value -> (boolean)

          

          Boolean value that indicates whether the face is wearing eye glasses or not.

          

          

        Confidence -> (float)

          

          Level of confidence in the determination.

          

          

        

      Sunglasses -> (structure)

        

        Indicates whether or not the face is wearing sunglasses, and the confidence level in the determination.

        

        Value -> (boolean)

          

          Boolean value that indicates whether the face is wearing sunglasses or not.

          

          

        Confidence -> (float)

          

          Level of confidence in the determination.

          

          

        

      Gender -> (structure)

        

        Gender of the face and the confidence level in the determination.

        

        Value -> (string)

          

          Gender of the face.

          

          

        Confidence -> (float)

          

          Level of confidence in the determination.

          

          

        

      Beard -> (structure)

        

        Indicates whether or not the face has a beard, and the confidence level in the determination.

        

        Value -> (boolean)

          

          Boolean value that indicates whether the face has beard or not.

          

          

        Confidence -> (float)

          

          Level of confidence in the determination.

          

          

        

      Mustache -> (structure)

        

        Indicates whether or not the face has a mustache, and the confidence level in the determination.

        

        Value -> (boolean)

          

          Boolean value that indicates whether the face has mustache or not.

          

          

        Confidence -> (float)

          

          Level of confidence in the determination.

          

          

        

      EyesOpen -> (structure)

        

        Indicates whether or not the eyes on the face are open, and the confidence level in the determination.

        

        Value -> (boolean)

          

          Boolean value that indicates whether the eyes on the face are open.

          

          

        Confidence -> (float)

          

          Level of confidence in the determination.

          

          

        

      MouthOpen -> (structure)

        

        Indicates whether or not the mouth on the face is open, and the confidence level in the determination.

        

        Value -> (boolean)

          

          Boolean value that indicates whether the mouth on the face is open or not.

          

          

        Confidence -> (float)

          

          Level of confidence in the determination.

          

          

        

      Emotions -> (list)

        

        The emotions detected on the face, and the confidence level in the determination. For example, HAPPY, SAD, and ANGRY. 

        

        (structure)

          

          The emotions detected on the face, and the confidence level in the determination. For example, HAPPY, SAD, and ANGRY.

          

          Type -> (string)

            

            Type of emotion detected.

            

            

          Confidence -> (float)

            

            Level of confidence in the determination.

            

            

          

        

      Landmarks -> (list)

        

        Indicates the location of landmarks on the face. Default attribute.

        

        (structure)

          

          Indicates the location of the landmark on the face.

          

          Type -> (string)

            

            Type of landmark.

            

            

          X -> (float)

            

            The x-coordinate from the top left of the landmark expressed as the ratio of the width of the image. For example, if the image is 700 x 200 and the x-coordinate of the landmark is at 350 pixels, this value is 0.5. 

            

            

          Y -> (float)

            

            The y-coordinate from the top left of the landmark expressed as the ratio of the height of the image. For example, if the image is 700 x 200 and the y-coordinate of the landmark is at 100 pixels, this value is 0.5.

            

            

          

        

      Pose -> (structure)

        

        Indicates the pose of the face as determined by its pitch, roll, and yaw. Default attribute.

        

        Roll -> (float)

          

          Value representing the face rotation on the roll axis.

          

          

        Yaw -> (float)

          

          Value representing the face rotation on the yaw axis.

          

          

        Pitch -> (float)

          

          Value representing the face rotation on the pitch axis.

          

          

        

      Quality -> (structure)

        

        Identifies image brightness and sharpness. Default attribute.

        

        Brightness -> (float)

          

          Value representing brightness of the face. The service returns a value between 0 and 100 (inclusive). A higher value indicates a brighter face image.

          

          

        Sharpness -> (float)

          

          Value representing sharpness of the face. The service returns a value between 0 and 100 (inclusive). A higher value indicates a sharper face image.

          

          

        

      Confidence -> (float)

        

        Confidence level that the bounding box contains a face (and not a different object such as a tree). Default attribute.

        

        

      

    

  

