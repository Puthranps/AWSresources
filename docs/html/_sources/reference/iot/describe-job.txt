[ :ref:`aws <cli:aws>` . :ref:`iot <cli:aws iot>` ]

.. _cli:aws iot describe-job:


************
describe-job
************



===========
Description
===========



Describes a job.



See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iot-2015-05-28/DescribeJob>`_

See :doc:`'aws help' </reference/index>` for descriptions of global parameters.


========
Synopsis
========

::

    describe-job
  --job-id <value>
  [--cli-input-json <value>]
  [--generate-cli-skeleton <value>]




=======
Options
=======

``--job-id`` (string)


  The unique identifier you assigned to this job when it was created.

  

``--cli-input-json`` (string)
Performs service operation based on the JSON string provided. The JSON string follows the format provided by ``--generate-cli-skeleton``. If other arguments are provided on the command line, the CLI values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally.

``--generate-cli-skeleton`` (string)
Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value ``input``, prints a sample input JSON that can be used as an argument for ``--cli-input-json``. If provided with the value ``output``, it validates the command inputs and returns a sample output JSON for that command.


See :doc:`'aws help' </reference/index>` for descriptions of global parameters.


======
Output
======

documentSource -> (string)

  

  An S3 link to the job document.

  

  

job -> (structure)

  

  Information about the job.

  

  jobArn -> (string)

    

    An ARN identifying the job with format "arn:aws:iot:region:account:job/jobId".

    

    

  jobId -> (string)

    

    The unique identifier you assigned to this job when it was created.

    

    

  targetSelection -> (string)

    

    Specifies whether the job will continue to run (CONTINUOUS), or will be complete after all those things specified as targets have completed the job (SNAPSHOT). If continuous, the job may also be run on a thing when a change is detected in a target. For example, a job will run on a device when the thing representing the device is added to a target group, even after the job was completed by all things originally in the group. 

    

    

  status -> (string)

    

    The status of the job, one of ``IN_PROGRESS`` , ``CANCELED`` , ``DELETION_IN_PROGRESS`` or ``COMPLETED`` . 

    

    

  forceCanceled -> (boolean)

    

    Will be ``true`` if the job was canceled with the optional ``force`` parameter set to ``true`` .

    

    

  comment -> (string)

    

    If the job was updated, describes the reason for the update.

    

    

  targets -> (list)

    

    A list of IoT things and thing groups to which the job should be sent.

    

    (string)

      

      

    

  description -> (string)

    

    A short text description of the job.

    

    

  presignedUrlConfig -> (structure)

    

    Configuration for pre-signed S3 URLs.

    

    roleArn -> (string)

      

      The ARN of an IAM role that grants grants permission to download files from the S3 bucket where the job data/updates are stored. The role must also grant permission for IoT to download the files.

      

      

    expiresInSec -> (long)

      

      How long (in seconds) pre-signed URLs are valid. Valid values are 60 - 3600, the default value is 3600 seconds. Pre-signed URLs are generated when Jobs receives an MQTT request for the job document.

      

      

    

  jobExecutionsRolloutConfig -> (structure)

    

    Allows you to create a staged rollout of a job.

    

    maximumPerMinute -> (integer)

      

      The maximum number of things that will be notified of a pending job, per minute. This parameter allows you to create a staged rollout.

      

      

    

  createdAt -> (timestamp)

    

    The time, in milliseconds since the epoch, when the job was created.

    

    

  lastUpdatedAt -> (timestamp)

    

    The time, in milliseconds since the epoch, when the job was last updated.

    

    

  completedAt -> (timestamp)

    

    The time, in milliseconds since the epoch, when the job was completed.

    

    

  jobProcessDetails -> (structure)

    

    Details about the job process.

    

    processingTargets -> (list)

      

      The target devices to which the job execution is being rolled out. This value will be null after the job execution has finished rolling out to all the target devices.

      

      (string)

        

        

      

    numberOfCanceledThings -> (integer)

      

      The number of things that cancelled the job.

      

      

    numberOfSucceededThings -> (integer)

      

      The number of things which successfully completed the job.

      

      

    numberOfFailedThings -> (integer)

      

      The number of things that failed executing the job.

      

      

    numberOfRejectedThings -> (integer)

      

      The number of things that rejected the job.

      

      

    numberOfQueuedThings -> (integer)

      

      The number of things that are awaiting execution of the job.

      

      

    numberOfInProgressThings -> (integer)

      

      The number of things currently executing the job.

      

      

    numberOfRemovedThings -> (integer)

      

      The number of things that are no longer scheduled to execute the job because they have been deleted or have been removed from the group that was a target of the job.

      

      

    numberOfTimedOutThings -> (integer)

      

      The number of things whose job execution status is ``TIMED_OUT`` .

      

      

    

  timeoutConfig -> (structure)

    

    Specifies the amount of time each device has to finish its execution of the job. A timer is started when the job execution status is set to ``IN_PROGRESS`` . If the job execution status is not set to another terminal state before the timer expires, it will be automatically set to ``TIMED_OUT`` .

    

    inProgressTimeoutInMinutes -> (long)

      

      Specifies the amount of time, in minutes, this device has to finish execution of this job. A timer is started, or restarted, whenever this job's execution status is specified as ``IN_PROGRESS`` with this field populated. If the job execution status is not set to a terminal state before the timer expires, or before another job execution status update is sent with this field populated, the status will be automatically set to ``TIMED_OUT`` . Note that setting/resetting this timer has no effect on the job execution timeout timer which may have been specified when the job was created (``CreateJobExecution`` using the field ``timeoutConfig`` ).

      

      

    

  

