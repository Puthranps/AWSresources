[ :ref:`aws <cli:aws>` . :ref:`ecs <cli:aws ecs>` ]

.. _cli:aws ecs deregister-task-definition:


**************************
deregister-task-definition
**************************



===========
Description
===========



Deregisters the specified task definition by family and revision. Upon deregistration, the task definition is marked as ``INACTIVE`` . Existing tasks and services that reference an ``INACTIVE`` task definition continue to run without disruption. Existing services that reference an ``INACTIVE`` task definition can still scale up or down by modifying the service's desired count.

 

You cannot use an ``INACTIVE`` task definition to run new tasks or create new services, and you cannot update an existing service to reference an ``INACTIVE`` task definition (although there may be up to a 10-minute window following deregistration where these restrictions have not yet taken effect).

 

.. note::

   

  At this time, ``INACTIVE`` task definitions remain discoverable in your account indefinitely; however, this behavior is subject to change in the future, so you should not rely on ``INACTIVE`` task definitions persisting beyond the lifecycle of any associated tasks and services.

   



See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/ecs-2014-11-13/DeregisterTaskDefinition>`_

See :doc:`'aws help' </reference/index>` for descriptions of global parameters.


========
Synopsis
========

::

    deregister-task-definition
  --task-definition <value>
  [--cli-input-json <value>]
  [--generate-cli-skeleton <value>]




=======
Options
=======

``--task-definition`` (string)


  The ``family`` and ``revision`` (``family:revision`` ) or full Amazon Resource Name (ARN) of the task definition to deregister. You must specify a ``revision`` .

  

``--cli-input-json`` (string)
Performs service operation based on the JSON string provided. The JSON string follows the format provided by ``--generate-cli-skeleton``. If other arguments are provided on the command line, the CLI values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally.

``--generate-cli-skeleton`` (string)
Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value ``input``, prints a sample input JSON that can be used as an argument for ``--cli-input-json``. If provided with the value ``output``, it validates the command inputs and returns a sample output JSON for that command.


See :doc:`'aws help' </reference/index>` for descriptions of global parameters.


========
Examples
========

**To deregister a task definition**

This example deregisters the first revision of the ``curler`` task definition in your default region. Note that in the resulting output, the task definition status becomes ``INACTIVE``.

Command::

  aws ecs deregister-task-definition --task-definition curler:1

Output::

  {
      "taskDefinition": {
          "status": "INACTIVE",
          "family": "curler",
          "volumes": [],
          "taskDefinitionArn": "arn:aws:ecs:us-west-2:<aws_account_id>:task-definition/curler:1",
          "containerDefinitions": [
              {
                  "environment": [],
                  "name": "curler",
                  "mountPoints": [],
                  "image": "curl:latest",
                  "cpu": 100,
                  "portMappings": [],
                  "entryPoint": [],
                  "memory": 256,
                  "command": [
                      "curl -v http://example.com/"
                  ],
                  "essential": true,
                  "volumesFrom": []
              }
          ],
          "revision": 1
      }
  }

======
Output
======

taskDefinition -> (structure)

  

  The full description of the deregistered task.

  

  taskDefinitionArn -> (string)

    

    The full Amazon Resource Name (ARN) of the task definition.

    

    

  containerDefinitions -> (list)

    

    A list of container definitions in JSON format that describe the different containers that make up your task. For more information about container definition parameters and defaults, see `Amazon ECS Task Definitions <http://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_defintions.html>`__ in the *Amazon Elastic Container Service Developer Guide* .

    

    (structure)

      

      Container definitions are used in task definitions to describe the different containers that are launched as part of a task.

      

      name -> (string)

        

        The name of a container. If you are linking multiple containers together in a task definition, the ``name`` of one container can be entered in the ``links`` of another container to connect the containers. Up to 255 letters (uppercase and lowercase), numbers, hyphens, and underscores are allowed. This parameter maps to ``name`` in the `Create a container <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--name`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__ . 

        

        

      image -> (string)

        

        The image used to start a container. This string is passed directly to the Docker daemon. Images in the Docker Hub registry are available by default. Other repositories are specified with either `` *repository-url* /*image* :*tag* `` or `` *repository-url* /*image* @*digest* `` . Up to 255 letters (uppercase and lowercase), numbers, hyphens, underscores, colons, periods, forward slashes, and number signs are allowed. This parameter maps to ``Image`` in the `Create a container <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``IMAGE`` parameter of `docker run <https://docs.docker.com/engine/reference/run/>`__ .

         

         
        * When a new task starts, the Amazon ECS container agent pulls the latest version of the specified image and tag for the container to use. However, subsequent updates to a repository image are not propagated to already running tasks. 
         
        * Images in Amazon ECR repositories can be specified by either using the full ``registry/repository:tag`` or ``registry/repository@digest`` . For example, ``012345678910.dkr.ecr.<region-name>.amazonaws.com/<repository-name>:latest`` or ``012345678910.dkr.ecr.<region-name>.amazonaws.com/<repository-name>@sha256:94afd1f2e64d908bc90dbca0035a5b567EXAMPLE`` .  
         
        * Images in official repositories on Docker Hub use a single name (for example, ``ubuntu`` or ``mongo`` ). 
         
        * Images in other repositories on Docker Hub are qualified with an organization name (for example, ``amazon/amazon-ecs-agent`` ). 
         
        * Images in other online repositories are qualified further by a domain name (for example, ``quay.io/assemblyline/ubuntu`` ). 
         

        

        

      repositoryCredentials -> (structure)

        

        The private repository authentication credentials to use.

        

        credentialsParameter -> (string)

          

          The Amazon Resource Name (ARN) or name of the secret containing the private repository credentials.

          

          

        

      cpu -> (integer)

        

        The number of ``cpu`` units reserved for the container. This parameter maps to ``CpuShares`` in the `Create a container <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--cpu-shares`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

         

        This field is optional for tasks using the Fargate launch type, and the only requirement is that the total amount of CPU reserved for all containers within a task be lower than the task-level ``cpu`` value.

         

        .. note::

           

          You can determine the number of CPU units that are available per EC2 instance type by multiplying the vCPUs listed for that instance type on the `Amazon EC2 Instances <http://aws.amazon.com/ec2/instance-types/>`__ detail page by 1,024.

           

         

        For example, if you run a single-container task on a single-core instance type with 512 CPU units specified for that container, and that is the only task running on the container instance, that container could use the full 1,024 CPU unit share at any given time. However, if you launched another copy of the same task on that container instance, each task would be guaranteed a minimum of 512 CPU units when needed, and each container could float to higher CPU usage if the other container was not using it, but if both tasks were 100% active all of the time, they would be limited to 512 CPU units.

         

        Linux containers share unallocated CPU units with other containers on the container instance with the same ratio as their allocated amount. For example, if you run a single-container task on a single-core instance type with 512 CPU units specified for that container, and that is the only task running on the container instance, that container could use the full 1,024 CPU unit share at any given time. However, if you launched another copy of the same task on that container instance, each task would be guaranteed a minimum of 512 CPU units when needed, and each container could float to higher CPU usage if the other container was not using it, but if both tasks were 100% active all of the time, they would be limited to 512 CPU units.

         

        On Linux container instances, the Docker daemon on the container instance uses the CPU value to calculate the relative CPU share ratios for running containers. For more information, see `CPU share constraint <https://docs.docker.com/engine/reference/run/#cpu-share-constraint>`__ in the Docker documentation. The minimum valid CPU share value that the Linux kernel allows is 2; however, the CPU parameter is not required, and you can use CPU values below 2 in your container definitions. For CPU values below 2 (including null), the behavior varies based on your Amazon ECS container agent version:

         

         
        * **Agent versions less than or equal to 1.1.0:** Null and zero CPU values are passed to Docker as 0, which Docker then converts to 1,024 CPU shares. CPU values of 1 are passed to Docker as 1, which the Linux kernel converts to 2 CPU shares. 
         
        * **Agent versions greater than or equal to 1.2.0:** Null, zero, and CPU values of 1 are passed to Docker as 2. 
         

         

        On Windows container instances, the CPU limit is enforced as an absolute limit, or a quota. Windows containers only have access to the specified amount of CPU that is described in the task definition.

        

        

      memory -> (integer)

        

        The hard limit (in MiB) of memory to present to the container. If your container attempts to exceed the memory specified here, the container is killed. This parameter maps to ``Memory`` in the `Create a container <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--memory`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

         

        If your containers are part of a task using the Fargate launch type, this field is optional and the only requirement is that the total amount of memory reserved for all containers within a task be lower than the task ``memory`` value.

         

        For containers that are part of a task using the EC2 launch type, you must specify a non-zero integer for one or both of ``memory`` or ``memoryReservation`` in container definitions. If you specify both, ``memory`` must be greater than ``memoryReservation`` . If you specify ``memoryReservation`` , then that value is subtracted from the available memory resources for the container instance on which the container is placed; otherwise, the value of ``memory`` is used.

         

        The Docker daemon reserves a minimum of 4 MiB of memory for a container, so you should not specify fewer than 4 MiB of memory for your containers. 

        

        

      memoryReservation -> (integer)

        

        The soft limit (in MiB) of memory to reserve for the container. When system memory is under heavy contention, Docker attempts to keep the container memory to this soft limit; however, your container can consume more memory when it needs to, up to either the hard limit specified with the ``memory`` parameter (if applicable), or all of the available memory on the container instance, whichever comes first. This parameter maps to ``MemoryReservation`` in the `Create a container <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--memory-reservation`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

         

        You must specify a non-zero integer for one or both of ``memory`` or ``memoryReservation`` in container definitions. If you specify both, ``memory`` must be greater than ``memoryReservation`` . If you specify ``memoryReservation`` , then that value is subtracted from the available memory resources for the container instance on which the container is placed; otherwise, the value of ``memory`` is used.

         

        For example, if your container normally uses 128 MiB of memory, but occasionally bursts to 256 MiB of memory for short periods of time, you can set a ``memoryReservation`` of 128 MiB, and a ``memory`` hard limit of 300 MiB. This configuration would allow the container to only reserve 128 MiB of memory from the remaining resources on the container instance, but also allow the container to consume more memory resources when needed.

         

        The Docker daemon reserves a minimum of 4 MiB of memory for a container, so you should not specify fewer than 4 MiB of memory for your containers. 

        

        

      links -> (list)

        

        The ``link`` parameter allows containers to communicate with each other without the need for port mappings. Only supported if the network mode of a task definition is set to ``bridge`` . The ``name:internalName`` construct is analogous to ``name:alias`` in Docker links. Up to 255 letters (uppercase and lowercase), numbers, hyphens, and underscores are allowed. For more information about linking Docker containers, go to `https\://docs.docker.com/engine/userguide/networking/default_network/dockerlinks/ <https://docs.docker.com/engine/userguide/networking/default_network/dockerlinks/>`__ . This parameter maps to ``Links`` in the `Create a container <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--link`` option to ` ``docker run`` https://docs.docker.com/engine/reference/commandline/run/`__ .

         

        .. note::

           

          This parameter is not supported for Windows containers.

           

         

        .. warning::

           

          Containers that are collocated on a single container instance may be able to communicate with each other without requiring links or host port mappings. Network isolation is achieved on the container instance using security groups and VPC settings.

           

        

        (string)

          

          

        

      portMappings -> (list)

        

        The list of port mappings for the container. Port mappings allow containers to access ports on the host container instance to send or receive traffic.

         

        For task definitions that use the ``awsvpc`` network mode, you should only specify the ``containerPort`` . The ``hostPort`` can be left blank or it must be the same value as the ``containerPort`` .

         

        Port mappings on Windows use the ``NetNAT`` gateway address rather than ``localhost`` . There is no loopback for port mappings on Windows, so you cannot access a container's mapped port from the host itself. 

         

        This parameter maps to ``PortBindings`` in the `Create a container <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--publish`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__ . If the network mode of a task definition is set to ``none`` , then you can't specify port mappings. If the network mode of a task definition is set to ``host`` , then host ports must either be undefined or they must match the container port in the port mapping.

         

        .. note::

           

          After a task reaches the ``RUNNING`` status, manual and automatic host and container port assignments are visible in the **Network Bindings** section of a container description for a selected task in the Amazon ECS console. The assignments are also visible in the ``networkBindings`` section  DescribeTasks responses.

           

        

        (structure)

          

          Port mappings allow containers to access ports on the host container instance to send or receive traffic. Port mappings are specified as part of the container definition.

           

          If using containers in a task with the ``awsvpc`` or ``host`` network mode, exposed ports should be specified using ``containerPort`` . The ``hostPort`` can be left blank or it must be the same value as the ``containerPort`` .

           

          After a task reaches the ``RUNNING`` status, manual and automatic host and container port assignments are visible in the ``networkBindings`` section of  DescribeTasks API responses.

          

          containerPort -> (integer)

            

            The port number on the container that is bound to the user-specified or automatically assigned host port.

             

            If using containers in a task with the ``awsvpc`` or ``host`` network mode, exposed ports should be specified using ``containerPort`` .

             

            If using containers in a task with the ``bridge`` network mode and you specify a container port and not a host port, your container automatically receives a host port in the ephemeral port range (for more information, see ``hostPort`` ). Port mappings that are automatically assigned in this way do not count toward the 100 reserved ports limit of a container instance.

            

            

          hostPort -> (integer)

            

            The port number on the container instance to reserve for your container.

             

            If using containers in a task with the ``awsvpc`` or ``host`` network mode, the ``hostPort`` can either be left blank or set to the same value as the ``containerPort`` .

             

            If using containers in a task with the ``bridge`` network mode, you can specify a non-reserved host port for your container port mapping, or you can omit the ``hostPort`` (or set it to ``0`` ) while specifying a ``containerPort`` and your container automatically receives a port in the ephemeral port range for your container instance operating system and Docker version.

             

            The default ephemeral port range for Docker version 1.6.0 and later is listed on the instance under ``/proc/sys/net/ipv4/ip_local_port_range`` ; if this kernel parameter is unavailable, the default ephemeral port range from 49153 through 65535 is used. You should not attempt to specify a host port in the ephemeral port range as these are reserved for automatic assignment. In general, ports below 32768 are outside of the ephemeral port range.

             

            .. note::

               

              The default ephemeral port range from 49153 through 65535 is always used for Docker versions before 1.6.0.

               

             

            The default reserved ports are 22 for SSH, the Docker ports 2375 and 2376, and the Amazon ECS container agent ports 51678 and 51679. Any host port that was previously specified in a running task is also reserved while the task is running (after a task stops, the host port is released). The current reserved ports are displayed in the ``remainingResources`` of  DescribeContainerInstances output, and a container instance may have up to 100 reserved ports at a time, including the default reserved ports (automatically assigned ports do not count toward the 100 reserved ports limit).

            

            

          protocol -> (string)

            

            The protocol used for the port mapping. Valid values are ``tcp`` and ``udp`` . The default is ``tcp`` .

            

            

          

        

      essential -> (boolean)

        

        If the ``essential`` parameter of a container is marked as ``true`` , and that container fails or stops for any reason, all other containers that are part of the task are stopped. If the ``essential`` parameter of a container is marked as ``false`` , then its failure does not affect the rest of the containers in a task. If this parameter is omitted, a container is assumed to be essential.

         

        All tasks must have at least one essential container. If you have an application that is composed of multiple containers, you should group containers that are used for a common purpose into components, and separate the different components into multiple task definitions. For more information, see `Application Architecture <http://docs.aws.amazon.com/AmazonECS/latest/developerguide/application_architecture.html>`__ in the *Amazon Elastic Container Service Developer Guide* .

        

        

      entryPoint -> (list)

        

        .. warning::

           

          Early versions of the Amazon ECS container agent do not properly handle ``entryPoint`` parameters. If you have problems using ``entryPoint`` , update your container agent or enter your commands and arguments as ``command`` array items instead.

           

         

        The entry point that is passed to the container. This parameter maps to ``Entrypoint`` in the `Create a container <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--entrypoint`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__ . For more information, see `https\://docs.docker.com/engine/reference/builder/#entrypoint <https://docs.docker.com/engine/reference/builder/#entrypoint>`__ .

        

        (string)

          

          

        

      command -> (list)

        

        The command that is passed to the container. This parameter maps to ``Cmd`` in the `Create a container <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``COMMAND`` parameter to `docker run <https://docs.docker.com/engine/reference/run/>`__ . For more information, see `https\://docs.docker.com/engine/reference/builder/#cmd <https://docs.docker.com/engine/reference/builder/#cmd>`__ .

        

        (string)

          

          

        

      environment -> (list)

        

        The environment variables to pass to a container. This parameter maps to ``Env`` in the `Create a container <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--env`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

         

        .. warning::

           

          We do not recommend using plaintext environment variables for sensitive information, such as credential data.

           

        

        (structure)

          

          A key and value pair object.

          

          name -> (string)

            

            The name of the key value pair. For environment variables, this is the name of the environment variable.

            

            

          value -> (string)

            

            The value of the key value pair. For environment variables, this is the value of the environment variable.

            

            

          

        

      mountPoints -> (list)

        

        The mount points for data volumes in your container.

         

        This parameter maps to ``Volumes`` in the `Create a container <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--volume`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

         

        Windows containers can mount whole directories on the same drive as ``$env:ProgramData`` . Windows containers cannot mount directories on a different drive, and mount point cannot be across drives.

        

        (structure)

          

          Details on a volume mount point that is used in a container definition.

          

          sourceVolume -> (string)

            

            The name of the volume to mount. Must be a volume name referenced in the ``name`` parameter of task definition ``volume`` .

            

            

          containerPath -> (string)

            

            The path on the container to mount the host volume at.

            

            

          readOnly -> (boolean)

            

            If this value is ``true`` , the container has read-only access to the volume. If this value is ``false`` , then the container can write to the volume. The default value is ``false`` .

            

            

          

        

      volumesFrom -> (list)

        

        Data volumes to mount from another container. This parameter maps to ``VolumesFrom`` in the `Create a container <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--volumes-from`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

        

        (structure)

          

          Details on a data volume from another container in the same task definition.

          

          sourceContainer -> (string)

            

            The name of another container within the same task definition to mount volumes from.

            

            

          readOnly -> (boolean)

            

            If this value is ``true`` , the container has read-only access to the volume. If this value is ``false`` , then the container can write to the volume. The default value is ``false`` .

            

            

          

        

      linuxParameters -> (structure)

        

        Linux-specific modifications that are applied to the container, such as Linux  KernelCapabilities .

         

        .. note::

           

          This parameter is not supported for Windows containers.

           

        

        capabilities -> (structure)

          

          The Linux capabilities for the container that are added to or dropped from the default configuration provided by Docker.

           

          .. note::

             

            If you are using tasks that use the Fargate launch type, ``capabilities`` is supported but the ``add`` parameter is not supported.

             

          

          add -> (list)

            

            The Linux capabilities for the container that have been added to the default configuration provided by Docker. This parameter maps to ``CapAdd`` in the `Create a container <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--cap-add`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

             

            .. note::

               

              If you are using tasks that use the Fargate launch type, the ``add`` parameter is not supported.

               

             

            Valid values: ``"ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" | "BLOCK_SUSPEND" | "CHOWN" | "DAC_OVERRIDE" | "DAC_READ_SEARCH" | "FOWNER" | "FSETID" | "IPC_LOCK" | "IPC_OWNER" | "KILL" | "LEASE" | "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" | "MKNOD" | "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" | "SETFCAP" | "SETGID" | "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT" | "SYS_CHROOT" | "SYS_MODULE" | "SYS_NICE" | "SYS_PACCT" | "SYS_PTRACE" | "SYS_RAWIO" | "SYS_RESOURCE" | "SYS_TIME" | "SYS_TTY_CONFIG" | "SYSLOG" | "WAKE_ALARM"``  

            

            (string)

              

              

            

          drop -> (list)

            

            The Linux capabilities for the container that have been removed from the default configuration provided by Docker. This parameter maps to ``CapDrop`` in the `Create a container <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--cap-drop`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

             

            Valid values: ``"ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" | "BLOCK_SUSPEND" | "CHOWN" | "DAC_OVERRIDE" | "DAC_READ_SEARCH" | "FOWNER" | "FSETID" | "IPC_LOCK" | "IPC_OWNER" | "KILL" | "LEASE" | "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" | "MKNOD" | "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" | "SETFCAP" | "SETGID" | "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT" | "SYS_CHROOT" | "SYS_MODULE" | "SYS_NICE" | "SYS_PACCT" | "SYS_PTRACE" | "SYS_RAWIO" | "SYS_RESOURCE" | "SYS_TIME" | "SYS_TTY_CONFIG" | "SYSLOG" | "WAKE_ALARM"``  

            

            (string)

              

              

            

          

        devices -> (list)

          

          Any host devices to expose to the container. This parameter maps to ``Devices`` in the `Create a container <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--device`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

           

          .. note::

             

            If you are using tasks that use the Fargate launch type, the ``devices`` parameter is not supported.

             

          

          (structure)

            

            An object representing a container instance host device.

            

            hostPath -> (string)

              

              The path for the device on the host container instance.

              

              

            containerPath -> (string)

              

              The path inside the container at which to expose the host device.

              

              

            permissions -> (list)

              

              The explicit permissions to provide to the container for the device. By default, the container has permissions for ``read`` , ``write`` , and ``mknod`` for the device.

              

              (string)

                

                

              

            

          

        initProcessEnabled -> (boolean)

          

          Run an ``init`` process inside the container that forwards signals and reaps processes. This parameter maps to the ``--init`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__ . This parameter requires version 1.25 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: ``sudo docker version | grep "Server API version"``  

          

          

        sharedMemorySize -> (integer)

          

          The value for the size (in MiB) of the ``/dev/shm`` volume. This parameter maps to the ``--shm-size`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

           

          .. note::

             

            If you are using tasks that use the Fargate launch type, the ``sharedMemorySize`` parameter is not supported.

             

          

          

        tmpfs -> (list)

          

          The container path, mount options, and size (in MiB) of the tmpfs mount. This parameter maps to the ``--tmpfs`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

           

          .. note::

             

            If you are using tasks that use the Fargate launch type, the ``tmpfs`` parameter is not supported.

             

          

          (structure)

            

            The container path, mount options, and size of the tmpfs mount.

            

            containerPath -> (string)

              

              The absolute file path where the tmpfs volume is to be mounted.

              

              

            size -> (integer)

              

              The size (in MiB) of the tmpfs volume.

              

              

            mountOptions -> (list)

              

              The list of tmpfs volume mount options.

               

              Valid values: ``"defaults" | "ro" | "rw" | "suid" | "nosuid" | "dev" | "nodev" | "exec" | "noexec" | "sync" | "async" | "dirsync" | "remount" | "mand" | "nomand" | "atime" | "noatime" | "diratime" | "nodiratime" | "bind" | "rbind" | "unbindable" | "runbindable" | "private" | "rprivate" | "shared" | "rshared" | "slave" | "rslave" | "relatime" | "norelatime" | "strictatime" | "nostrictatime" | "mode" | "uid" | "gid" | "nr_inodes" | "nr_blocks" | "mpol"``  

              

              (string)

                

                

              

            

          

        

      hostname -> (string)

        

        The hostname to use for your container. This parameter maps to ``Hostname`` in the `Create a container <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--hostname`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

         

        .. note::

           

          The ``hostname`` parameter is not supported if using the ``awsvpc`` networkMode.

           

        

        

      user -> (string)

        

        The user name to use inside the container. This parameter maps to ``User`` in the `Create a container <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--user`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

         

        .. note::

           

          This parameter is not supported for Windows containers.

           

        

        

      workingDirectory -> (string)

        

        The working directory in which to run commands inside the container. This parameter maps to ``WorkingDir`` in the `Create a container <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--workdir`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

        

        

      disableNetworking -> (boolean)

        

        When this parameter is true, networking is disabled within the container. This parameter maps to ``NetworkDisabled`` in the `Create a container <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ .

         

        .. note::

           

          This parameter is not supported for Windows containers.

           

        

        

      privileged -> (boolean)

        

        When this parameter is true, the container is given elevated privileges on the host container instance (similar to the ``root`` user). This parameter maps to ``Privileged`` in the `Create a container <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--privileged`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

         

        .. note::

           

          This parameter is not supported for Windows containers or tasks using the Fargate launch type.

           

        

        

      readonlyRootFilesystem -> (boolean)

        

        When this parameter is true, the container is given read-only access to its root file system. This parameter maps to ``ReadonlyRootfs`` in the `Create a container <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--read-only`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

         

        .. note::

           

          This parameter is not supported for Windows containers.

           

        

        

      dnsServers -> (list)

        

        A list of DNS servers that are presented to the container. This parameter maps to ``Dns`` in the `Create a container <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--dns`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

         

        .. note::

           

          This parameter is not supported for Windows containers.

           

        

        (string)

          

          

        

      dnsSearchDomains -> (list)

        

        A list of DNS search domains that are presented to the container. This parameter maps to ``DnsSearch`` in the `Create a container <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--dns-search`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

         

        .. note::

           

          This parameter is not supported for Windows containers.

           

        

        (string)

          

          

        

      extraHosts -> (list)

        

        A list of hostnames and IP address mappings to append to the ``/etc/hosts`` file on the container. If using the Fargate launch type, this may be used to list non-Fargate hosts to which the container can talk. This parameter maps to ``ExtraHosts`` in the `Create a container <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--add-host`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

         

        .. note::

           

          This parameter is not supported for Windows containers.

           

        

        (structure)

          

          Hostnames and IP address entries that are added to the ``/etc/hosts`` file of a container via the ``extraHosts`` parameter of its  ContainerDefinition . 

          

          hostname -> (string)

            

            The hostname to use in the ``/etc/hosts`` entry.

            

            

          ipAddress -> (string)

            

            The IP address to use in the ``/etc/hosts`` entry.

            

            

          

        

      dockerSecurityOptions -> (list)

        

        A list of strings to provide custom labels for SELinux and AppArmor multi-level security systems. This field is not valid for containers in tasks using the Fargate launch type.

         

        This parameter maps to ``SecurityOpt`` in the `Create a container <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--security-opt`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

         

        .. note::

           

          The Amazon ECS container agent running on a container instance must register with the ``ECS_SELINUX_CAPABLE=true`` or ``ECS_APPARMOR_CAPABLE=true`` environment variables before containers placed on that instance can use these security options. For more information, see `Amazon ECS Container Agent Configuration <http://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html>`__ in the *Amazon Elastic Container Service Developer Guide* .

           

          This parameter is not supported for Windows containers.

           

        

        (string)

          

          

        

      interactive -> (boolean)

        

        When this parameter is ``true`` , this allows you to deploy containerized applications that require ``stdin`` or a ``tty`` to be allocated. This parameter maps to ``OpenStdin`` in the `Create a container <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--interactive`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

        

        

      pseudoTerminal -> (boolean)

        

        When this parameter is ``true`` , a TTY is allocated. This parameter maps to ``Tty`` in the `Create a container <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--tty`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

        

        

      dockerLabels -> (map)

        

        A key/value map of labels to add to the container. This parameter maps to ``Labels`` in the `Create a container <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--label`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__ . This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: ``sudo docker version | grep "Server API version"``  

        

        key -> (string)

          

          

        value -> (string)

          

          

        

      ulimits -> (list)

        

        A list of ``ulimits`` to set in the container. This parameter maps to ``Ulimits`` in the `Create a container <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--ulimit`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__ . Valid naming values are displayed in the  Ulimit data type. This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: ``sudo docker version | grep "Server API version"``  

         

        .. note::

           

          This parameter is not supported for Windows containers.

           

        

        (structure)

          

          The ``ulimit`` settings to pass to the container.

          

          name -> (string)

            

            The ``type`` of the ``ulimit`` .

            

            

          softLimit -> (integer)

            

            The soft limit for the ulimit type.

            

            

          hardLimit -> (integer)

            

            The hard limit for the ulimit type.

            

            

          

        

      logConfiguration -> (structure)

        

        The log configuration specification for the container.

         

        If using the Fargate launch type, the only supported value is ``awslogs`` .

         

        This parameter maps to ``LogConfig`` in the `Create a container <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--log-driver`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__ . By default, containers use the same logging driver that the Docker daemon uses; however the container may use a different logging driver than the Docker daemon by specifying a log driver with this parameter in the container definition. To use a different logging driver for a container, the log system must be configured properly on the container instance (or on a different log server for remote logging options). For more information on the options for different supported log drivers, see `Configure logging drivers <https://docs.docker.com/engine/admin/logging/overview/>`__ in the Docker documentation.

         

        .. note::

           

          Amazon ECS currently supports a subset of the logging drivers available to the Docker daemon (shown in the  LogConfiguration data type). Additional log drivers may be available in future releases of the Amazon ECS container agent.

           

         

        This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: ``sudo docker version | grep "Server API version"``  

         

        .. note::

           

          The Amazon ECS container agent running on a container instance must register the logging drivers available on that instance with the ``ECS_AVAILABLE_LOGGING_DRIVERS`` environment variable before containers placed on that instance can use these log configuration options. For more information, see `Amazon ECS Container Agent Configuration <http://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html>`__ in the *Amazon Elastic Container Service Developer Guide* .

           

        

        logDriver -> (string)

          

          The log driver to use for the container. The valid values listed for this parameter are log drivers that the Amazon ECS container agent can communicate with by default. If using the Fargate launch type, the only supported value is ``awslogs`` . For more information about using the ``awslogs`` driver, see `Using the awslogs Log Driver <http://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_awslogs.html>`__ in the *Amazon Elastic Container Service Developer Guide* .

           

          .. note::

             

            If you have a custom driver that is not listed above that you would like to work with the Amazon ECS container agent, you can fork the Amazon ECS container agent project that is `available on GitHub <https://github.com/aws/amazon-ecs-agent>`__ and customize it to work with that driver. We encourage you to submit pull requests for changes that you would like to have included. However, Amazon Web Services does not currently support running modified copies of this software.

             

           

          This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: ``sudo docker version | grep "Server API version"``  

          

          

        options -> (map)

          

          The configuration options to send to the log driver. This parameter requires version 1.19 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: ``sudo docker version | grep "Server API version"``  

          

          key -> (string)

            

            

          value -> (string)

            

            

          

        

      healthCheck -> (structure)

        

        The health check command and associated configuration parameters for the container. This parameter maps to ``HealthCheck`` in the `Create a container <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``HEALTHCHECK`` parameter of `docker run <https://docs.docker.com/engine/reference/run/>`__ .

        

        command -> (list)

          

          A string array representing the command that the container runs to determine if it is healthy. The string array must start with ``CMD`` to execute the command arguments directly, or ``CMD-SHELL`` to run the command with the container's default shell. For example:

           

           ``[ "CMD-SHELL", "curl -f http://localhost/ || exit 1" ]``  

           

          An exit code of 0 indicates success, and non-zero exit code indicates failure. For more information, see ``HealthCheck`` in the `Create a container <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ .

          

          (string)

            

            

          

        interval -> (integer)

          

          The time period in seconds between each health check execution. You may specify between 5 and 300 seconds. The default value is 30 seconds.

          

          

        timeout -> (integer)

          

          The time period in seconds to wait for a health check to succeed before it is considered a failure. You may specify between 2 and 60 seconds. The default value is 5.

          

          

        retries -> (integer)

          

          The number of times to retry a failed health check before the container is considered unhealthy. You may specify between 1 and 10 retries. The default value is 3.

          

          

        startPeriod -> (integer)

          

          The optional grace period within which to provide containers time to bootstrap before failed health checks count towards the maximum number of retries. You may specify between 0 and 300 seconds. The ``startPeriod`` is disabled by default.

           

          .. note::

             

            If a health check succeeds within the ``startPeriod`` , then the container is considered healthy and any subsequent failures count toward the maximum number of retries.

             

          

          

        

      systemControls -> (list)

        

        A list of namespaced kernel parameters to set in the container. This parameter maps to ``Sysctls`` in the `Create a container <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--sysctl`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

         

        .. note::

           

          It is not recommended that you specify network-related ``systemControls`` parameters for multiple containers in a single task that also uses either the ``awsvpc`` or ``host`` network modes. When you do, the container that is started last will determine which ``systemControls`` parameters take effect.

           

        

        (structure)

          

          A list of namespaced kernel parameters to set in the container. This parameter maps to ``Sysctls`` in the `Create a container <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--sysctl`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

           

          .. note::

             

            It is not recommended that you specify network-related ``systemControls`` parameters for multiple containers in a single task that also uses either the ``awsvpc`` or ``host`` network modes. When you do, the container that is started last will determine which ``systemControls`` parameters take effect.

             

          

          namespace -> (string)

            

            The namespaced kernel parameter to set a ``value`` for.

            

            

          value -> (string)

            

            The value for the namespaced kernel parameter specifed in ``namespace`` .

            

            

          

        

      

    

  family -> (string)

    

    The family of your task definition, used as the definition name.

    

    

  taskRoleArn -> (string)

    

    The ARN of the IAM role that containers in this task can assume. All containers in this task are granted the permissions that are specified in this role.

     

    IAM roles for tasks on Windows require that the ``-EnableTaskIAMRole`` option is set when you launch the Amazon ECS-optimized Windows AMI. Your containers must also run some configuration code in order to take advantage of the feature. For more information, see `Windows IAM Roles for Tasks <http://docs.aws.amazon.com/AmazonECS/latest/developerguide/windows_task_IAM_roles.html>`__ in the *Amazon Elastic Container Service Developer Guide* .

    

    

  executionRoleArn -> (string)

    

    The Amazon Resource Name (ARN) of the task execution role that the Amazon ECS container agent and the Docker daemon can assume.

    

    

  networkMode -> (string)

    

    The Docker networking mode to use for the containers in the task. The valid values are ``none`` , ``bridge`` , ``awsvpc`` , and ``host`` . The default Docker network mode is ``bridge`` . If using the Fargate launch type, the ``awsvpc`` network mode is required. If using the EC2 launch type, any network mode can be used. If the network mode is set to ``none`` , you can't specify port mappings in your container definitions, and the task's containers do not have external connectivity. The ``host`` and ``awsvpc`` network modes offer the highest networking performance for containers because they use the EC2 network stack instead of the virtualized network stack provided by the ``bridge`` mode.

     

    With the ``host`` and ``awsvpc`` network modes, exposed container ports are mapped directly to the corresponding host port (for the ``host`` network mode) or the attached elastic network interface port (for the ``awsvpc`` network mode), so you cannot take advantage of dynamic host port mappings. 

     

    If the network mode is ``awsvpc`` , the task is allocated an Elastic Network Interface, and you must specify a  NetworkConfiguration when you create a service or run a task with the task definition. For more information, see `Task Networking <http://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html>`__ in the *Amazon Elastic Container Service Developer Guide* .

     

    .. note::

       

      Currently, only the Amazon ECS-optimized AMI, other Amazon Linux variants with the ``ecs-init`` package, or AWS Fargate infrastructure support the ``awsvpc`` network mode. 

       

     

    If the network mode is ``host`` , you can't run multiple instantiations of the same task on a single container instance when port mappings are used.

     

    Docker for Windows uses different network modes than Docker for Linux. When you register a task definition with Windows containers, you must not specify a network mode. If you use the console to register a task definition with Windows containers, you must choose the ``<default>`` network mode object. 

     

    For more information, see `Network settings <https://docs.docker.com/engine/reference/run/#network-settings>`__ in the *Docker run reference* .

    

    

  revision -> (integer)

    

    The revision of the task in a particular family. The revision is a version number of a task definition in a family. When you register a task definition for the first time, the revision is ``1`` ; each time you register a new revision of a task definition in the same family, the revision value always increases by one (even if you have deregistered previous revisions in this family).

    

    

  volumes -> (list)

    

    The list of volumes in a task.

     

    If you are using the Fargate launch type, the ``host`` and ``sourcePath`` parameters are not supported.

     

    For more information about volume definition parameters and defaults, see `Amazon ECS Task Definitions <http://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definitions.html>`__ in the *Amazon Elastic Container Service Developer Guide* .

    

    (structure)

      

      A data volume used in a task definition. For tasks that use a Docker volume, specify a ``DockerVolumeConfiguration`` . For tasks that use a bind mount host volume, specify a ``host`` and optional ``sourcePath`` . For more information, see `Using Data Volumes in Tasks <http://docs.aws.amazon.com/AmazonECS/latest/developerguideusing_data_volumes.html>`__ .

      

      name -> (string)

        

        The name of the volume. Up to 255 letters (uppercase and lowercase), numbers, hyphens, and underscores are allowed. This name is referenced in the ``sourceVolume`` parameter of container definition ``mountPoints`` .

        

        

      host -> (structure)

        

        This parameter is specified when using bind mount host volumes. Bind mount host volumes are supported when using either the EC2 or Fargate launch types. The contents of the ``host`` parameter determine whether your bind mount host volume persists on the host container instance and where it is stored. If the ``host`` parameter is empty, then the Docker daemon assigns a host path for your data volume, but the data is not guaranteed to persist after the containers associated with it stop running.

         

        Windows containers can mount whole directories on the same drive as ``$env:ProgramData`` . Windows containers cannot mount directories on a different drive, and mount point cannot be across drives. For example, you can mount ``C:\my\path:C:\my\path`` and ``D:\:D:\`` , but not ``D:\my\path:C:\my\path`` or ``D:\:C:\my\path`` .

        

        sourcePath -> (string)

          

          When the ``host`` parameter is used, specify a ``sourcePath`` to declare the path on the host container instance that is presented to the container. If this parameter is empty, then the Docker daemon has assigned a host path for you. If the ``host`` parameter contains a ``sourcePath`` file location, then the data volume persists at the specified location on the host container instance until you delete it manually. If the ``sourcePath`` value does not exist on the host container instance, the Docker daemon creates it. If the location does exist, the contents of the source path folder are exported.

           

          If you are using the Fargate launch type, the ``sourcePath`` parameter is not supported.

          

          

        

      dockerVolumeConfiguration -> (structure)

        

        This parameter is specified when using Docker volumes. Docker volumes are only supported when using the EC2 launch type. Windows containers only support the use of the ``local`` driver. To use bind mounts, specify a ``host`` instead.

        

        scope -> (string)

          

          The scope for the Docker volume which determines it's lifecycle. Docker volumes that are scoped to a ``task`` are automatically provisioned when the task starts and destroyed when the task stops. Docker volumes that are scoped as ``shared`` persist after the task stops.

          

          

        autoprovision -> (boolean)

          

          If this value is ``true`` , the Docker volume is created if it does not already exist.

           

          .. note::

             

            This field is only used if the ``scope`` is ``shared`` .

             

          

          

        driver -> (string)

          

          The Docker volume driver to use. The driver value must match the driver name provided by Docker because it is used for task placement. If the driver was installed using the Docker plugin CLI, use ``docker plugin ls`` to retrieve the driver name from your container instance. If the driver was installed using another method, use Docker plugin discovery to retrieve the driver name. For more information, see `Docker plugin discovery <https://docs.docker.com/engine/extend/plugin_api/#plugin-discovery>`__ . This parameter maps to ``Driver`` in the `Create a volume <https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate>`__ section of the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``xxdriver`` option to ` ``docker volume create`` https://docs.docker.com/engine/reference/commandline/volume_create/`__ .

          

          

        driverOpts -> (map)

          

          A map of Docker driver specific options passed through. This parameter maps to ``DriverOpts`` in the `Create a volume <https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate>`__ section of the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``xxopt`` option to ` ``docker volume create`` https://docs.docker.com/engine/reference/commandline/volume_create/`__ .

          

          key -> (string)

            

            

          value -> (string)

            

            

          

        labels -> (map)

          

          Custom metadata to add to your Docker volume. This parameter maps to ``Labels`` in the `Create a volume <https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate>`__ section of the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``xxlabel`` option to ` ``docker volume create`` https://docs.docker.com/engine/reference/commandline/volume_create/`__ .

          

          key -> (string)

            

            

          value -> (string)

            

            

          

        

      

    

  status -> (string)

    

    The status of the task definition.

    

    

  requiresAttributes -> (list)

    

    The container instance attributes required by your task. This field is not valid if using the Fargate launch type for your task.

    

    (structure)

      

      An attribute is a name-value pair associated with an Amazon ECS object. Attributes enable you to extend the Amazon ECS data model by adding custom metadata to your resources. For more information, see `Attributes <http://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html#attributes>`__ in the *Amazon Elastic Container Service Developer Guide* .

      

      name -> (string)

        

        The name of the attribute. Up to 128 letters (uppercase and lowercase), numbers, hyphens, underscores, and periods are allowed.

        

        

      value -> (string)

        

        The value of the attribute. Up to 128 letters (uppercase and lowercase), numbers, hyphens, underscores, periods, at signs (@), forward slashes, colons, and spaces are allowed.

        

        

      targetType -> (string)

        

        The type of the target with which to attach the attribute. This parameter is required if you use the short form ID for a resource instead of the full ARN.

        

        

      targetId -> (string)

        

        The ID of the target. You can specify the short form ID for a resource or the full Amazon Resource Name (ARN).

        

        

      

    

  placementConstraints -> (list)

    

    An array of placement constraint objects to use for tasks. This field is not valid if using the Fargate launch type for your task.

    

    (structure)

      

      An object representing a constraint on task placement in the task definition.

       

      If you are using the Fargate launch type, task placement constraints are not supported.

       

      For more information, see `Task Placement Constraints <http://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html>`__ in the *Amazon Elastic Container Service Developer Guide* .

      

      type -> (string)

        

        The type of constraint. The ``DistinctInstance`` constraint ensures that each task in a particular group is running on a different container instance. The ``MemberOf`` constraint restricts selection to be from a group of valid candidates.

        

        

      expression -> (string)

        

        A cluster query language expression to apply to the constraint. For more information, see `Cluster Query Language <http://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html>`__ in the *Amazon Elastic Container Service Developer Guide* .

        

        

      

    

  compatibilities -> (list)

    

    The launch type to use with your task. For more information, see `Amazon ECS Launch Types <http://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html>`__ in the *Amazon Elastic Container Service Developer Guide* .

    

    (string)

      

      

    

  requiresCompatibilities -> (list)

    

    The launch type the task is using.

    

    (string)

      

      

    

  cpu -> (string)

    

    The number of ``cpu`` units used by the task. If using the EC2 launch type, this field is optional and any value can be used. If using the Fargate launch type, this field is required and you must use one of the following values, which determines your range of valid values for the ``memory`` parameter:

     

     
    * 256 (.25 vCPU) - Available ``memory`` values: 512 (0.5 GB), 1024 (1 GB), 2048 (2 GB) 
     
    * 512 (.5 vCPU) - Available ``memory`` values: 1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB) 
     
    * 1024 (1 vCPU) - Available ``memory`` values: 2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8 GB) 
     
    * 2048 (2 vCPU) - Available ``memory`` values: Between 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB) 
     
    * 4096 (4 vCPU) - Available ``memory`` values: Between 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB) 
     

    

    

  memory -> (string)

    

    The amount (in MiB) of memory used by the task. If using the EC2 launch type, this field is optional and any value can be used. If using the Fargate launch type, this field is required and you must use one of the following values, which determines your range of valid values for the ``cpu`` parameter:

     

     
    * 512 (0.5 GB), 1024 (1 GB), 2048 (2 GB) - Available ``cpu`` values: 256 (.25 vCPU) 
     
    * 1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB) - Available ``cpu`` values: 512 (.5 vCPU) 
     
    * 2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8 GB) - Available ``cpu`` values: 1024 (1 vCPU) 
     
    * Between 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB) - Available ``cpu`` values: 2048 (2 vCPU) 
     
    * Between 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB) - Available ``cpu`` values: 4096 (4 vCPU) 
     

    

    

  



.. _https://docs.docker.com/engine/reference/commandline/run/: https://docs.docker.com/engine/reference/commandline/run/
.. _https://docs.docker.com/engine/reference/commandline/volume_create/: https://docs.docker.com/engine/reference/commandline/volume_create/
