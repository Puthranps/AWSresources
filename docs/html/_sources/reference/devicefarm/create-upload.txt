[ :ref:`aws <cli:aws>` . :ref:`devicefarm <cli:aws devicefarm>` ]

.. _cli:aws devicefarm create-upload:


*************
create-upload
*************



===========
Description
===========



Uploads an app or test scripts.



See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/devicefarm-2015-06-23/CreateUpload>`_

See :doc:`'aws help' </reference/index>` for descriptions of global parameters.


========
Synopsis
========

::

    create-upload
  --project-arn <value>
  --name <value>
  --type <value>
  [--content-type <value>]
  [--cli-input-json <value>]
  [--generate-cli-skeleton <value>]




=======
Options
=======

``--project-arn`` (string)


  The ARN of the project for the upload.

  

``--name`` (string)


  The upload's file name. The name should not contain the '/' character. If uploading an iOS app, the file name needs to end with the ``.ipa`` extension. If uploading an Android app, the file name needs to end with the ``.apk`` extension. For all others, the file name must end with the ``.zip`` file extension.

  

``--type`` (string)


  The upload's upload type.

   

  Must be one of the following values:

   

   
  * ANDROID_APP: An Android upload. 
   
  * IOS_APP: An iOS upload. 
   
  * WEB_APP: A web application upload. 
   
  * EXTERNAL_DATA: An external data upload. 
   
  * APPIUM_JAVA_JUNIT_TEST_PACKAGE: An Appium Java JUnit test package upload. 
   
  * APPIUM_JAVA_TESTNG_TEST_PACKAGE: An Appium Java TestNG test package upload. 
   
  * APPIUM_PYTHON_TEST_PACKAGE: An Appium Python test package upload. 
   
  * APPIUM_WEB_JAVA_JUNIT_TEST_PACKAGE: An Appium Java JUnit test package upload. 
   
  * APPIUM_WEB_JAVA_TESTNG_TEST_PACKAGE: An Appium Java TestNG test package upload. 
   
  * APPIUM_WEB_PYTHON_TEST_PACKAGE: An Appium Python test package upload. 
   
  * CALABASH_TEST_PACKAGE: A Calabash test package upload. 
   
  * INSTRUMENTATION_TEST_PACKAGE: An instrumentation upload. 
   
  * UIAUTOMATION_TEST_PACKAGE: A uiautomation test package upload. 
   
  * UIAUTOMATOR_TEST_PACKAGE: A uiautomator test package upload. 
   
  * XCTEST_TEST_PACKAGE: An XCode test package upload. 
   
  * XCTEST_UI_TEST_PACKAGE: An XCode UI test package upload. 
   

   

   **Note** If you call ``CreateUpload`` with ``WEB_APP`` specified, AWS Device Farm throws an ``ArgumentException`` error.

  

  Possible values:

  
  *   ``ANDROID_APP``

  
  *   ``IOS_APP``

  
  *   ``WEB_APP``

  
  *   ``EXTERNAL_DATA``

  
  *   ``APPIUM_JAVA_JUNIT_TEST_PACKAGE``

  
  *   ``APPIUM_JAVA_TESTNG_TEST_PACKAGE``

  
  *   ``APPIUM_PYTHON_TEST_PACKAGE``

  
  *   ``APPIUM_WEB_JAVA_JUNIT_TEST_PACKAGE``

  
  *   ``APPIUM_WEB_JAVA_TESTNG_TEST_PACKAGE``

  
  *   ``APPIUM_WEB_PYTHON_TEST_PACKAGE``

  
  *   ``CALABASH_TEST_PACKAGE``

  
  *   ``INSTRUMENTATION_TEST_PACKAGE``

  
  *   ``UIAUTOMATION_TEST_PACKAGE``

  
  *   ``UIAUTOMATOR_TEST_PACKAGE``

  
  *   ``XCTEST_TEST_PACKAGE``

  
  *   ``XCTEST_UI_TEST_PACKAGE``

  
  *   ``APPIUM_JAVA_JUNIT_TEST_SPEC``

  
  *   ``APPIUM_JAVA_TESTNG_TEST_SPEC``

  
  *   ``APPIUM_PYTHON_TEST_SPEC``

  
  *   ``APPIUM_WEB_JAVA_JUNIT_TEST_SPEC``

  
  *   ``APPIUM_WEB_JAVA_TESTNG_TEST_SPEC``

  
  *   ``APPIUM_WEB_PYTHON_TEST_SPEC``

  
  *   ``INSTRUMENTATION_TEST_SPEC``

  
  *   ``XCTEST_UI_TEST_SPEC``

  

  

``--content-type`` (string)


  The upload's content type (for example, "application/octet-stream").

  

``--cli-input-json`` (string)
Performs service operation based on the JSON string provided. The JSON string follows the format provided by ``--generate-cli-skeleton``. If other arguments are provided on the command line, the CLI values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally.

``--generate-cli-skeleton`` (string)
Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value ``input``, prints a sample input JSON that can be used as an argument for ``--cli-input-json``. If provided with the value ``output``, it validates the command inputs and returns a sample output JSON for that command.


See :doc:`'aws help' </reference/index>` for descriptions of global parameters.


========
Examples
========

**Create an upload**

The following command creates an upload for an Android app::

  aws devicefarm create-upload --project-arn "arn:aws:devicefarm:us-west-2:123456789012:project:070fc3ca-7ec1-4741-9c1f-d3e044efc506" --name app.apk --type ANDROID_APP

You can get the project ARN from the output of `create-project` or `list-projects`.

Output::

  {
      "upload": {
          "status": "INITIALIZED",
          "name": "app.apk",
          "created": 1503614408.769,
          "url": "https://prod-us-west-2-uploads.s3-us-west-2.amazonaws.com/arn%3Aaws%3Adevicefarm%3Aus-west-2%3A123456789012%3Aproject%3A070fc3ca-c7e1-4471-91cf-d3e4efc50604/uploads/arn%3Aaws%3Adevicefarm%3Aus-west-2%3A123456789012%3Aupload%3A070fc3ca-7ec1-4741-9c1f-d3e044efc506/dd72723a-ae9e-4087-09e6-f4cea3599514/app.apk?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20170824T224008Z&X-Amz-SignedHeaders=host&X-Amz-Expires=86400&X-Amz-Credential=AKIAEXAMPLEPBUMBC3GA%2F20170824%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Signature=05050370c38894ef5bd09f5d009f36fc8f96fa4bb04e1bba9aca71b8dbe49a0f",
          "type": "ANDROID_APP",
          "arn": "arn:aws:devicefarm:us-west-2:123456789012:upload:070fc3ca-7ec1-4741-9c1f-d3e044efc506/dd72723a-ae9e-4087-09e6-f4cea3599514"
      }
  }

Use the signed URL in the output to upload a file to Device Farm::

  curl -T app.apk "https://prod-us-west-2-uploads.s3-us-west-2.amazonaws.com/arn%3Aaws%3Adevicefarm%3Aus-west-2%3A123456789012%3Aproject%3A070fc3ca-c7e1-4471-91cf-d3e4efc50604/uploads/arn%3Aaws%3Adevicefarm%3Aus-west-2%3A123456789012%3Aupload%3A070fc3ca-7ec1-4741-9c1f-d3e044efc506/dd72723a-ae9e-4087-09e6-f4cea3599514/app.apk?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20170824T224008Z&X-Amz-SignedHeaders=host&X-Amz-Expires=86400&X-Amz-Credential=AKIAEXAMPLEPBUMBC3GA%2F20170824%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Signature=05050370c38894ef5bd09f5d009f36fc8f96fa4bb04e1bba9aca71b8dbe49a0f"

======
Output
======

upload -> (structure)

  

  The newly created upload.

  

  arn -> (string)

    

    The upload's ARN.

    

    

  name -> (string)

    

    The upload's file name.

    

    

  created -> (timestamp)

    

    When the upload was created.

    

    

  type -> (string)

    

    The upload's type.

     

    Must be one of the following values:

     

     
    * ANDROID_APP: An Android upload. 
     
    * IOS_APP: An iOS upload. 
     
    * WEB_APP: A web appliction upload. 
     
    * EXTERNAL_DATA: An external data upload. 
     
    * APPIUM_JAVA_JUNIT_TEST_PACKAGE: An Appium Java JUnit test package upload. 
     
    * APPIUM_JAVA_TESTNG_TEST_PACKAGE: An Appium Java TestNG test package upload. 
     
    * APPIUM_PYTHON_TEST_PACKAGE: An Appium Python test package upload. 
     
    * APPIUM_WEB_JAVA_JUNIT_TEST_PACKAGE: An Appium Java JUnit test package upload. 
     
    * APPIUM_WEB_JAVA_TESTNG_TEST_PACKAGE: An Appium Java TestNG test package upload. 
     
    * APPIUM_WEB_PYTHON_TEST_PACKAGE: An Appium Python test package upload. 
     
    * CALABASH_TEST_PACKAGE: A Calabash test package upload. 
     
    * INSTRUMENTATION_TEST_PACKAGE: An instrumentation upload. 
     
    * UIAUTOMATION_TEST_PACKAGE: A uiautomation test package upload. 
     
    * UIAUTOMATOR_TEST_PACKAGE: A uiautomator test package upload. 
     
    * XCTEST_TEST_PACKAGE: An XCode test package upload. 
     
    * XCTEST_UI_TEST_PACKAGE: An XCode UI test package upload. 
     

    

    

  status -> (string)

    

    The upload's status.

     

    Must be one of the following values:

     

     
    * FAILED: A failed status. 
     
    * INITIALIZED: An initialized status. 
     
    * PROCESSING: A processing status. 
     
    * SUCCEEDED: A succeeded status. 
     

    

    

  url -> (string)

    

    The pre-signed Amazon S3 URL that was used to store a file through a corresponding PUT request.

    

    

  metadata -> (string)

    

    The upload's metadata. For example, for Android, this contains information that is parsed from the manifest and is displayed in the AWS Device Farm console after the associated app is uploaded.

    

    

  contentType -> (string)

    

    The upload's content type (for example, "application/octet-stream").

    

    

  message -> (string)

    

    A message about the upload's result.

    

    

  category -> (string)

    

    The upload's category. Allowed values include:

     

     
    * CURATED: An upload managed by AWS Device Farm. 
     
    * PRIVATE: An upload managed by the AWS Device Farm customer. 
     

    

    

  

