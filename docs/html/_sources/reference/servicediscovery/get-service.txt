[ :ref:`aws <cli:aws>` . :ref:`servicediscovery <cli:aws servicediscovery>` ]

.. _cli:aws servicediscovery get-service:


***********
get-service
***********



===========
Description
===========



Gets the settings for a specified service.



See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/GetService>`_

See :doc:`'aws help' </reference/index>` for descriptions of global parameters.


========
Synopsis
========

::

    get-service
  --id <value>
  [--cli-input-json <value>]
  [--generate-cli-skeleton <value>]




=======
Options
=======

``--id`` (string)


  The ID of the service that you want to get settings for.

  

``--cli-input-json`` (string)
Performs service operation based on the JSON string provided. The JSON string follows the format provided by ``--generate-cli-skeleton``. If other arguments are provided on the command line, the CLI values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally.

``--generate-cli-skeleton`` (string)
Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value ``input``, prints a sample input JSON that can be used as an argument for ``--cli-input-json``. If provided with the value ``output``, it validates the command inputs and returns a sample output JSON for that command.


See :doc:`'aws help' </reference/index>` for descriptions of global parameters.


======
Output
======

Service -> (structure)

  

  A complex type that contains information about the service.

  

  Id -> (string)

    

    The ID that Route 53 assigned to the service when you created it.

    

    

  Arn -> (string)

    

    The Amazon Resource Name (ARN) that Route 53 assigns to the service when you create it.

    

    

  Name -> (string)

    

    The name of the service.

    

    

  Description -> (string)

    

    The description of the service.

    

    

  InstanceCount -> (integer)

    

    The number of instances that are currently associated with the service. Instances that were previously associated with the service but that have been deleted are not included in the count.

    

    

  DnsConfig -> (structure)

    

    A complex type that contains information about the records that you want Route 53 to create when you register an instance.

    

    NamespaceId -> (string)

      

      The ID of the namespace to use for DNS configuration.

      

      

    RoutingPolicy -> (string)

      

      The routing policy that you want to apply to all records that Route 53 creates when you register an instance and specify this service.

       

      .. note::

         

        If you want to use this service to register instances that create alias records, specify ``WEIGHTED`` for the routing policy.

         

       

      You can specify the following values:

       

       **MULTIVALUE**  

       

      If you define a health check for the service and the health check is healthy, Route 53 returns the applicable value for up to eight instances.

       

      For example, suppose the service includes configurations for one A record and a health check, and you use the service to register 10 instances. Route 53 responds to DNS queries with IP addresses for up to eight healthy instances. If fewer than eight instances are healthy, Route 53 responds to every DNS query with the IP addresses for all of the healthy instances.

       

      If you don't define a health check for the service, Route 53 assumes that all instances are healthy and returns the values for up to eight instances.

       

      For more information about the multivalue routing policy, see `Multivalue Answer Routing <http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy.html#routing-policy-multivalue>`__ in the *Route 53 Developer Guide* .

       

       **WEIGHTED**  

       

      Route 53 returns the applicable value from one randomly selected instance from among the instances that you registered using the same service. Currently, all records have the same weight, so you can't route more or less traffic to any instances.

       

      For example, suppose the service includes configurations for one A record and a health check, and you use the service to register 10 instances. Route 53 responds to DNS queries with the IP address for one randomly selected instance from among the healthy instances. If no instances are healthy, Route 53 responds to DNS queries as if all of the instances were healthy.

       

      If you don't define a health check for the service, Route 53 assumes that all instances are healthy and returns the applicable value for one randomly selected instance.

       

      For more information about the weighted routing policy, see `Weighted Routing <http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy.html#routing-policy-weighted>`__ in the *Route 53 Developer Guide* .

      

      

    DnsRecords -> (list)

      

      An array that contains one ``DnsRecord`` object for each record that you want Route 53 to create when you register an instance.

      

      (structure)

        

        A complex type that contains information about the records that you want Route 53 to create when you register an instance.

        

        Type -> (string)

          

          The type of the resource, which indicates the type of value that Route 53 returns in response to DNS queries.

           

          Note the following:

           

           
          * **A, AAAA, and SRV records: You can specify settings for a maximum of one A, one AAAA, and one SRV record. You can specify them in any combination.**   
           
          * **CNAME records:** If you specify ``CNAME`` for ``Type`` , you can't define any other records. This is a limitation of DNSâ€”you can't create a CNAME record and any other type of record that has the same name as a CNAME record. 
           
          * **Alias records:** If you want Route 53 to create an alias record when you register an instance, specify ``A`` or ``AAAA`` for ``Type`` . 
           
          * **All records:** You specify settings other than ``TTL`` and ``Type`` when you register an instance. 
           

           

          The following values are supported:

           

           **A**  

           

          Route 53 returns the IP address of the resource in IPv4 format, such as 192.0.2.44.

           

           **AAAA**  

           

          Route 53 returns the IP address of the resource in IPv6 format, such as 2001:0db8:85a3:0000:0000:abcd:0001:2345.

           

           **CNAME**  

           

          Route 53 returns the domain name of the resource, such as www.example.com. Note the following:

           

           
          * You specify the domain name that you want to route traffic to when you register an instance. For more information, see  RegisterInstanceRequest$Attributes . 
           
          * You must specify ``WEIGHTED`` for the value of ``RoutingPolicy`` . 
           
          * You can't specify both ``CNAME`` for ``Type`` and settings for ``HealthCheckConfig`` . If you do, the request will fail with an ``InvalidInput`` error. 
           

           

           **SRV**  

           

          Route 53 returns the value for an SRV record. The value for an SRV record uses the following values:

           

           ``priority weight port service-hostname``  

           

          Note the following about the values:

           

           
          * The values of ``priority`` and ``weight`` are both set to ``1`` and can't be changed.  
           
          * The value of ``port`` comes from the value that you specify for the ``AWS_INSTANCE_PORT`` attribute when you submit a  RegisterInstance request.  
           
          * The value of ``service-hostname`` is a concatenation of the following values: 

             
            * The value that you specify for ``InstanceId`` when you register an instance. 
             
            * The name of the service. 
             
            * The name of the namespace.  
             

           

          For example, if the value of ``InstanceId`` is ``test`` , the name of the service is ``backend`` , and the name of the namespace is ``example.com`` , the value of ``service-hostname`` is:

           

           ``test.backend.example.com``  

           
           

           

          If you specify settings for an SRV record and if you specify values for ``AWS_INSTANCE_IPV4`` , ``AWS_INSTANCE_IPV6`` , or both in the ``RegisterInstance`` request, Route 53 automatically creates ``A`` and/or ``AAAA`` records that have the same name as the value of ``service-hostname`` in the SRV record. You can ignore these records.

          

          

        TTL -> (long)

          

          The amount of time, in seconds, that you want DNS resolvers to cache the settings for this record.

           

          .. note::

             

            Alias records don't include a TTL because Route 53 uses the TTL for the AWS resource that an alias record routes traffic to. If you include the ``AWS_ALIAS_DNS_NAME`` attribute when you submit a  RegisterInstance request, the ``TTL`` value is ignored. Always specify a TTL for the service; you can use a service to register instances that create either alias or non-alias records.

             

          

          

        

      

    

  HealthCheckConfig -> (structure)

    

     *Public DNS namespaces only.* A complex type that contains settings for an optional health check. If you specify settings for a health check, Route 53 associates the health check with all the records that you specify in ``DnsConfig`` .

     

    For information about the charges for health checks, see `Route 53 Pricing <http://aws.amazon.com/route53/pricing>`__ .

    

    Type -> (string)

      

      The type of health check that you want to create, which indicates how Route 53 determines whether an endpoint is healthy.

       

      .. warning::

         

        You can't change the value of ``Type`` after you create a health check.

         

       

      You can create the following types of health checks:

       

       
      * **HTTP** : Route 53 tries to establish a TCP connection. If successful, Route 53 submits an HTTP request and waits for an HTTP status code of 200 or greater and less than 400. 
       
      * **HTTPS** : Route 53 tries to establish a TCP connection. If successful, Route 53 submits an HTTPS request and waits for an HTTP status code of 200 or greater and less than 400. 

      .. warning::

         If you specify HTTPS for the value of ``Type`` , the endpoint must support TLS v1.0 or later. 

       
       
      * **TCP** : Route 53 tries to establish a TCP connection. 
       

       

      For more information, see `How Route 53 Determines Whether an Endpoint Is Healthy <http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-determining-health-of-endpoints.html>`__ in the *Route 53 Developer Guide* .

      

      

    ResourcePath -> (string)

      

      The path that you want Route 53 to request when performing health checks. The path can be any value for which your endpoint will return an HTTP status code of 2xx or 3xx when the endpoint is healthy, such as the file ``/docs/route53-health-check.html`` . Route 53 automatically adds the DNS name for the service and a leading forward slash (``/`` ) character. 

      

      

    FailureThreshold -> (integer)

      

      The number of consecutive health checks that an endpoint must pass or fail for Route 53 to change the current status of the endpoint from unhealthy to healthy or vice versa. For more information, see `How Route 53 Determines Whether an Endpoint Is Healthy <http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-determining-health-of-endpoints.html>`__ in the *Route 53 Developer Guide* .

      

      

    

  HealthCheckCustomConfig -> (structure)

    

    FailureThreshold -> (integer)

      

      

    

  CreateDate -> (timestamp)

    

    The date and time that the service was created, in Unix format and Coordinated Universal Time (UTC). The value of ``CreateDate`` is accurate to milliseconds. For example, the value ``1516925490.087`` represents Friday, January 26, 2018 12:11:30.087 AM.

    

    

  CreatorRequestId -> (string)

    

    A unique string that identifies the request and that allows failed requests to be retried without the risk of executing the operation twice. ``CreatorRequestId`` can be any unique string, for example, a date/time stamp.

    

    

  

