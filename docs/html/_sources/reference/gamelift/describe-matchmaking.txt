[ :ref:`aws <cli:aws>` . :ref:`gamelift <cli:aws gamelift>` ]

.. _cli:aws gamelift describe-matchmaking:


********************
describe-matchmaking
********************



===========
Description
===========



Retrieves one or more matchmaking tickets. Use this operation to retrieve ticket information, including status and--once a successful match is made--acquire connection information for the resulting new game session. 

 

You can use this operation to track the progress of matchmaking requests (through polling) as an alternative to using event notifications. See more details on tracking matchmaking requests through polling or notifications in  StartMatchmaking . 

 

To request matchmaking tickets, provide a list of up to 10 ticket IDs. If the request is successful, a ticket object is returned for each requested ID that currently exists.

 

Matchmaking-related operations include:

 

 
*  StartMatchmaking   
 
*  DescribeMatchmaking   
 
*  StopMatchmaking   
 
*  AcceptMatch   
 
*  StartMatchBackfill   
 



See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/gamelift-2015-10-01/DescribeMatchmaking>`_

See :doc:`'aws help' </reference/index>` for descriptions of global parameters.


========
Synopsis
========

::

    describe-matchmaking
  --ticket-ids <value>
  [--cli-input-json <value>]
  [--generate-cli-skeleton <value>]




=======
Options
=======

``--ticket-ids`` (list)


  Unique identifier for a matchmaking ticket. You can include up to 10 ID values. 

  



Syntax::

  "string" "string" ...



``--cli-input-json`` (string)
Performs service operation based on the JSON string provided. The JSON string follows the format provided by ``--generate-cli-skeleton``. If other arguments are provided on the command line, the CLI values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally.

``--generate-cli-skeleton`` (string)
Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value ``input``, prints a sample input JSON that can be used as an argument for ``--cli-input-json``. If provided with the value ``output``, it validates the command inputs and returns a sample output JSON for that command.


See :doc:`'aws help' </reference/index>` for descriptions of global parameters.


======
Output
======

TicketList -> (list)

  

  Collection of existing matchmaking ticket objects matching the request.

  

  (structure)

    

    Ticket generated to track the progress of a matchmaking request. Each ticket is uniquely identified by a ticket ID, supplied by the requester, when creating a matchmaking request with  StartMatchmaking . Tickets can be retrieved by calling  DescribeMatchmaking with the ticket ID.

    

    TicketId -> (string)

      

      Unique identifier for a matchmaking ticket.

      

      

    ConfigurationName -> (string)

      

      Name of the  MatchmakingConfiguration that is used with this ticket. Matchmaking configurations determine how players are grouped into a match and how a new game session is created for the match.

      

      

    Status -> (string)

      

      Current status of the matchmaking request.

       

       
      * **QUEUED** -- The matchmaking request has been received and is currently waiting to be processed. 
       
      * **SEARCHING** -- The matchmaking request is currently being processed.  
       
      * **REQUIRES_ACCEPTANCE** -- A match has been proposed and the players must accept the match (see  AcceptMatch ). This status is used only with requests that use a matchmaking configuration with a player acceptance requirement. 
       
      * **PLACING** -- The FlexMatch engine has matched players and is in the process of placing a new game session for the match. 
       
      * **COMPLETED** -- Players have been matched and a game session is ready to host the players. A ticket in this state contains the necessary connection information for players. 
       
      * **FAILED** -- The matchmaking request was not completed. Tickets with players who fail to accept a proposed match are placed in ``FAILED`` status. 
       
      * **CANCELLED** -- The matchmaking request was canceled with a call to  StopMatchmaking . 
       
      * **TIMED_OUT** -- The matchmaking request was not successful within the duration specified in the matchmaking configuration.  
       

       

      .. note::

         

        Matchmaking requests that fail to successfully complete (statuses FAILED, CANCELLED, TIMED_OUT) can be resubmitted as new requests with new ticket IDs.

         

      

      

    StatusReason -> (string)

      

      Code to explain the current status. For example, a status reason may indicate when a ticket has returned to ``SEARCHING`` status after a proposed match fails to receive player acceptances.

      

      

    StatusMessage -> (string)

      

      Additional information about the current status.

      

      

    StartTime -> (timestamp)

      

      Time stamp indicating when this matchmaking request was received. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").

      

      

    EndTime -> (timestamp)

      

      Time stamp indicating when this matchmaking request stopped being processed due to success, failure, or cancellation. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").

      

      

    Players -> (list)

      

      A set of ``Player`` objects, each representing a player to find matches for. Players are identified by a unique player ID and may include latency data for use during matchmaking. If the ticket is in status ``COMPLETED`` , the ``Player`` objects include the team the players were assigned to in the resulting match.

      

      (structure)

        

        Represents a player in matchmaking. When starting a matchmaking request, a player has a player ID, attributes, and may have latency data. Team information is added after a match has been successfully completed.

        

        PlayerId -> (string)

          

          Unique identifier for a player

          

          

        PlayerAttributes -> (map)

          

          Collection of key:value pairs containing player information for use in matchmaking. Player attribute keys must match the *playerAttributes* used in a matchmaking rule set. Example: ``"PlayerAttributes": {"skill": {"N": "23"}, "gameMode": {"S": "deathmatch"}}`` .

          

          key -> (string)

            

            

          value -> (structure)

            

            Values for use in  Player attribute key:value pairs. This object lets you specify an attribute value using any of the valid data types: string, number, string array or data map. Each ``AttributeValue`` object can use only one of the available properties.

            

            S -> (string)

              

              For single string values. Maximum string length is 100 characters.

              

              

            N -> (double)

              

              For number values, expressed as double.

              

              

            SL -> (list)

              

              For a list of up to 10 strings. Maximum length for each string is 100 characters. Duplicate values are not recognized; all occurrences of the repeated value after the first of a repeated value are ignored.

              

              (string)

                

                

              

            SDM -> (map)

              

              For a map of up to 10 data type:value pairs. Maximum length for each string value is 100 characters. 

              

              key -> (string)

                

                

              value -> (double)

                

                

              

            

          

        Team -> (string)

          

          Name of the team that the player is assigned to in a match. Team names are defined in a matchmaking rule set.

          

          

        LatencyInMs -> (map)

          

          Set of values, expressed in milliseconds, indicating the amount of latency that a player experiences when connected to AWS regions. If this property is present, FlexMatch considers placing the match only in regions for which latency is reported. 

           

          If a matchmaker has a rule that evaluates player latency, players must report latency in order to be matched. If no latency is reported in this scenario, FlexMatch assumes that no regions are available to the player and the ticket is not matchable. 

          

          key -> (string)

            

            

          value -> (integer)

            

            

          

        

      

    GameSessionConnectionInfo -> (structure)

      

      Identifier and connection information of the game session created for the match. This information is added to the ticket only after the matchmaking request has been successfully completed.

      

      GameSessionArn -> (string)

        

        Amazon Resource Name (`ARN <http://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html>`__ ) that is assigned to a game session and uniquely identifies it.

        

        

      IpAddress -> (string)

        

        IP address of the game session. To connect to a Amazon GameLift game server, an app needs both the IP address and port number.

        

        

      Port -> (integer)

        

        Port number for the game session. To connect to a Amazon GameLift game server, an app needs both the IP address and port number.

        

        

      MatchedPlayerSessions -> (list)

        

        Collection of player session IDs, one for each player ID that was included in the original matchmaking request. 

        

        (structure)

          

          Represents a new player session that is created as a result of a successful FlexMatch match. A successful match automatically creates new player sessions for every player ID in the original matchmaking request. 

           

          When players connect to the match's game session, they must include both player ID and player session ID in order to claim their assigned player slot.

          

          PlayerId -> (string)

            

            Unique identifier for a player 

            

            

          PlayerSessionId -> (string)

            

            Unique identifier for a player session

            

            

          

        

      

    EstimatedWaitTime -> (integer)

      

      Average amount of time (in seconds) that players are currently waiting for a match. If there is not enough recent data, this property may be empty.

      

      

    

  

