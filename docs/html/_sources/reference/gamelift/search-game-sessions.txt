[ :ref:`aws <cli:aws>` . :ref:`gamelift <cli:aws gamelift>` ]

.. _cli:aws gamelift search-game-sessions:


********************
search-game-sessions
********************



===========
Description
===========



Retrieves all active game sessions that match a set of search criteria and sorts them in a specified order. You can search or sort by the following game session attributes:

 

 
* **gameSessionId** -- Unique identifier for the game session. You can use either a ``GameSessionId`` or ``GameSessionArn`` value.  
 
* **gameSessionName** -- Name assigned to a game session. This value is set when requesting a new game session with  CreateGameSession or updating with  UpdateGameSession . Game session names do not need to be unique to a game session. 
 
* **gameSessionProperties** -- Custom data defined in a game session's ``GameProperty`` parameter. ``GameProperty`` values are stored as key:value pairs; the filter expression must indicate the key and a string to search the data values for. For example, to search for game sessions with custom data containing the key:value pair "gameMode:brawl", specify the following: ``gameSessionProperties.gameMode = "brawl"`` . All custom data values are searched as strings. 
 
* **maximumSessions** -- Maximum number of player sessions allowed for a game session. This value is set when requesting a new game session with  CreateGameSession or updating with  UpdateGameSession . 
 
* **creationTimeMillis** -- Value indicating when a game session was created. It is expressed in Unix time as milliseconds. 
 
* **playerSessionCount** -- Number of players currently connected to a game session. This value changes rapidly as players join the session or drop out. 
 
* **hasAvailablePlayerSessions** -- Boolean value indicating whether a game session has reached its maximum number of players. It is highly recommended that all search requests include this filter attribute to optimize search performance and return only sessions that players can join.  
 

 

.. note::

   

  Returned values for ``playerSessionCount`` and ``hasAvailablePlayerSessions`` change quickly as players join sessions and others drop out. Results should be considered a snapshot in time. Be sure to refresh search results often, and handle sessions that fill up before a player can join. 

   

 

To search or sort, specify either a fleet ID or an alias ID, and provide a search filter expression, a sort expression, or both. If successful, a collection of  GameSession objects matching the request is returned. Use the pagination parameters to retrieve results as a set of sequential pages. 

 

You can search for game sessions one fleet at a time only. To find game sessions across multiple fleets, you must search each fleet separately and combine the results. This search feature finds only game sessions that are in ``ACTIVE`` status. To locate games in statuses other than active, use  DescribeGameSessionDetails .

 

Game-session-related operations include:

 

 
*  CreateGameSession   
 
*  DescribeGameSessions   
 
*  DescribeGameSessionDetails   
 
*  SearchGameSessions   
 
*  UpdateGameSession   
 
*  GetGameSessionLogUrl   
 
* Game session placements 

   
  *  StartGameSessionPlacement   
   
  *  DescribeGameSessionPlacement   
   
  *  StopGameSessionPlacement   
   

 
 



See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/gamelift-2015-10-01/SearchGameSessions>`_

See :doc:`'aws help' </reference/index>` for descriptions of global parameters.


========
Synopsis
========

::

    search-game-sessions
  [--fleet-id <value>]
  [--alias-id <value>]
  [--filter-expression <value>]
  [--sort-expression <value>]
  [--limit <value>]
  [--next-token <value>]
  [--cli-input-json <value>]
  [--generate-cli-skeleton <value>]




=======
Options
=======

``--fleet-id`` (string)


  Unique identifier for a fleet to search for active game sessions. Each request must reference either a fleet ID or alias ID, but not both.

  

``--alias-id`` (string)


  Unique identifier for an alias associated with the fleet to search for active game sessions. Each request must reference either a fleet ID or alias ID, but not both.

  

``--filter-expression`` (string)


  String containing the search criteria for the session search. If no filter expression is included, the request returns results for all game sessions in the fleet that are in ``ACTIVE`` status.

   

  A filter expression can contain one or multiple conditions. Each condition consists of the following:

   

   
  * **Operand** -- Name of a game session attribute. Valid values are ``gameSessionName`` , ``gameSessionId`` , ``gameSessionProperties`` , ``maximumSessions`` , ``creationTimeMillis`` , ``playerSessionCount`` , ``hasAvailablePlayerSessions`` . 
   
  * **Comparator** -- Valid comparators are: ``=`` , ``<>`` , ``<`` , ``>`` , ``<=`` , ``>=`` .  
   
  * **Value** -- Value to be searched for. Values may be numbers, boolean values (true/false) or strings depending on the operand. String values are case sensitive and must be enclosed in single quotes. Special characters must be escaped. Boolean and string values can only be used with the comparators ``=`` and ``<>`` . For example, the following filter expression searches on ``gameSessionName`` : "``FilterExpression": "gameSessionName = 'Matt\\'s Awesome Game 1'"`` .  
   

   

  To chain multiple conditions in a single expression, use the logical keywords ``AND`` , ``OR`` , and ``NOT`` and parentheses as needed. For example: ``x AND y AND NOT z`` , ``NOT (x OR y)`` .

   

  Session search evaluates conditions from left to right using the following precedence rules:

   

   
  * ``=`` , ``<>`` , ``<`` , ``>`` , ``<=`` , ``>=``   
   
  * Parentheses 
   
  * NOT 
   
  * AND 
   
  * OR 
   

   

  For example, this filter expression retrieves game sessions hosting at least ten players that have an open player slot: ``"maximumSessions>=10 AND hasAvailablePlayerSessions=true"`` . 

  

``--sort-expression`` (string)


  Instructions on how to sort the search results. If no sort expression is included, the request returns results in random order. A sort expression consists of the following elements:

   

   
  * **Operand** -- Name of a game session attribute. Valid values are ``gameSessionName`` , ``gameSessionId`` , ``gameSessionProperties`` , ``maximumSessions`` , ``creationTimeMillis`` , ``playerSessionCount`` , ``hasAvailablePlayerSessions`` . 
   
  * **Order** -- Valid sort orders are ``ASC`` (ascending) and ``DESC`` (descending). 
   

   

  For example, this sort expression returns the oldest active sessions first: ``"SortExpression": "creationTimeMillis ASC"`` . Results with a null value for the sort operand are returned at the end of the list.

  

``--limit`` (integer)


  Maximum number of results to return. Use this parameter with ``NextToken`` to get results as a set of sequential pages. The maximum number of results returned is 20, even if this value is not set or is set higher than 20. 

  

``--next-token`` (string)


  Token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this action. To start at the beginning of the result set, do not specify a value.

  

``--cli-input-json`` (string)
Performs service operation based on the JSON string provided. The JSON string follows the format provided by ``--generate-cli-skeleton``. If other arguments are provided on the command line, the CLI values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally.

``--generate-cli-skeleton`` (string)
Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value ``input``, prints a sample input JSON that can be used as an argument for ``--cli-input-json``. If provided with the value ``output``, it validates the command inputs and returns a sample output JSON for that command.


See :doc:`'aws help' </reference/index>` for descriptions of global parameters.


======
Output
======

GameSessions -> (list)

  

  Collection of objects containing game session properties for each session matching the request.

  

  (structure)

    

    Properties describing a game session.

     

    A game session in ACTIVE status can host players. When a game session ends, its status is set to ``TERMINATED`` . 

     

    Once the session ends, the game session object is retained for 30 days. This means you can reuse idempotency token values after this time. Game session logs are retained for 14 days.

     

    Game-session-related operations include:

     

     
    *  CreateGameSession   
     
    *  DescribeGameSessions   
     
    *  DescribeGameSessionDetails   
     
    *  SearchGameSessions   
     
    *  UpdateGameSession   
     
    *  GetGameSessionLogUrl   
     
    * Game session placements 

       
      *  StartGameSessionPlacement   
       
      *  DescribeGameSessionPlacement   
       
      *  StopGameSessionPlacement   
       

     
     

    

    GameSessionId -> (string)

      

      Unique identifier for the game session. A game session ARN has the following format: ``arn:aws:gamelift:<region>::gamesession/<fleet ID>/<custom ID string or idempotency token>`` .

      

      

    Name -> (string)

      

      Descriptive label that is associated with a game session. Session names do not need to be unique.

      

      

    FleetId -> (string)

      

      Unique identifier for a fleet that the game session is running on.

      

      

    CreationTime -> (timestamp)

      

      Time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").

      

      

    TerminationTime -> (timestamp)

      

      Time stamp indicating when this data object was terminated. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").

      

      

    CurrentPlayerSessionCount -> (integer)

      

      Number of players currently in the game session.

      

      

    MaximumPlayerSessionCount -> (integer)

      

      Maximum number of players that can be connected simultaneously to the game session.

      

      

    Status -> (string)

      

      Current status of the game session. A game session must have an ``ACTIVE`` status to have player sessions.

      

      

    StatusReason -> (string)

      

      Provides additional information about game session status. ``INTERRUPTED`` indicates that the game session was hosted on a spot instance that was reclaimed, causing the active game session to be terminated.

      

      

    GameProperties -> (list)

      

      Set of custom properties for a game session, formatted as key:value pairs. These properties are passed to a game server process in the  GameSession object with a request to start a new game session (see `Start a Game Session <http://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-startsession>`__ ). You can search for active game sessions based on this custom data with  SearchGameSessions .

      

      (structure)

        

        Set of key-value pairs that contain information about a game session. When included in a game session request, these properties communicate details to be used when setting up the new game session, such as to specify a game mode, level, or map. Game properties are passed to the game server process when initiating a new game session; the server process uses the properties as appropriate. For more information, see the `Amazon GameLift Developer Guide <http://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-client-api.html#gamelift-sdk-client-api-create>`__ .

        

        Key -> (string)

          

          Game property identifier.

          

          

        Value -> (string)

          

          Game property value.

          

          

        

      

    IpAddress -> (string)

      

      IP address of the game session. To connect to a Amazon GameLift game server, an app needs both the IP address and port number.

      

      

    Port -> (integer)

      

      Port number for the game session. To connect to a Amazon GameLift game server, an app needs both the IP address and port number.

      

      

    PlayerSessionCreationPolicy -> (string)

      

      Indicates whether or not the game session is accepting new players.

      

      

    CreatorId -> (string)

      

      Unique identifier for a player. This ID is used to enforce a resource protection policy (if one exists), that limits the number of game sessions a player can create.

      

      

    GameSessionData -> (string)

      

      Set of custom game session properties, formatted as a single string value. This data is passed to a game server process in the  GameSession object with a request to start a new game session (see `Start a Game Session <http://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-startsession>`__ ).

      

      

    MatchmakerData -> (string)

      

      Information about the matchmaking process that was used to create the game session. It is in JSON syntax, formatted as a string. In addition the matchmaking configuration used, it contains data on all players assigned to the match, including player attributes and team assignments. For more details on matchmaker data, see `Match Data <http://docs.aws.amazon.com/gamelift/latest/developerguide/match-server.html#match-server-data>`__ . Matchmaker data is useful when requesting match backfills, and is updated whenever new players are added during a successful backfill (see  StartMatchBackfill ). 

      

      

    

  

NextToken -> (string)

  

  Token that indicates where to resume retrieving results on the next call to this action. If no token is returned, these results represent the end of the list.

  

  

