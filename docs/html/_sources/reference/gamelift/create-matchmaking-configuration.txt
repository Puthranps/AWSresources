[ :ref:`aws <cli:aws>` . :ref:`gamelift <cli:aws gamelift>` ]

.. _cli:aws gamelift create-matchmaking-configuration:


********************************
create-matchmaking-configuration
********************************



===========
Description
===========



Defines a new matchmaking configuration for use with FlexMatch. A matchmaking configuration sets out guidelines for matching players and getting the matches into games. You can set up multiple matchmaking configurations to handle the scenarios needed for your game. Each matchmaking ticket ( StartMatchmaking or  StartMatchBackfill ) specifies a configuration for the match and provides player attributes to support the configuration being used. 

 

To create a matchmaking configuration, at a minimum you must specify the following: configuration name; a rule set that governs how to evaluate players and find acceptable matches; a game session queue to use when placing a new game session for the match; and the maximum time allowed for a matchmaking attempt.

 

 **Player acceptance** -- In each configuration, you have the option to require that all players accept participation in a proposed match. To enable this feature, set *AcceptanceRequired* to true and specify a time limit for player acceptance. Players have the option to accept or reject a proposed match, and a match does not move ahead to game session placement unless all matched players accept. 

 

 **Matchmaking status notification** -- There are two ways to track the progress of matchmaking tickets: (1) polling ticket status with  DescribeMatchmaking ; or (2) receiving notifications with Amazon Simple Notification Service (SNS). To use notifications, you first need to set up an SNS topic to receive the notifications, and provide the topic ARN in the matchmaking configuration (see `Setting up Notifications for Matchmaking <http://docs.aws.amazon.com/gamelift/latest/developerguide/match-notification.html>`__ ). Since notifications promise only "best effort" delivery, we recommend calling ``DescribeMatchmaking`` if no notifications are received within 30 seconds.

 

Operations related to match configurations and rule sets include:

 

 
*  CreateMatchmakingConfiguration   
 
*  DescribeMatchmakingConfigurations   
 
*  UpdateMatchmakingConfiguration   
 
*  DeleteMatchmakingConfiguration   
 
*  CreateMatchmakingRuleSet   
 
*  DescribeMatchmakingRuleSets   
 
*  ValidateMatchmakingRuleSet   
 



See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/gamelift-2015-10-01/CreateMatchmakingConfiguration>`_

See :doc:`'aws help' </reference/index>` for descriptions of global parameters.


========
Synopsis
========

::

    create-matchmaking-configuration
  --name <value>
  [--description <value>]
  --game-session-queue-arns <value>
  --request-timeout-seconds <value>
  [--acceptance-timeout-seconds <value>]
  --acceptance-required | --no-acceptance-required
  --rule-set-name <value>
  [--notification-target <value>]
  [--additional-player-count <value>]
  [--custom-event-data <value>]
  [--game-properties <value>]
  [--game-session-data <value>]
  [--cli-input-json <value>]
  [--generate-cli-skeleton <value>]




=======
Options
=======

``--name`` (string)


  Unique identifier for a matchmaking configuration. This name is used to identify the configuration associated with a matchmaking request or ticket.

  

``--description`` (string)


  Meaningful description of the matchmaking configuration. 

  

``--game-session-queue-arns`` (list)


  Amazon Resource Name (`ARN <http://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html>`__ ) that is assigned to a game session queue and uniquely identifies it. Format is ``arn:aws:gamelift:<region>::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912`` . These queues are used when placing game sessions for matches that are created with this matchmaking configuration. Queues can be located in any region.

  



Syntax::

  "string" "string" ...



``--request-timeout-seconds`` (integer)


  Maximum duration, in seconds, that a matchmaking ticket can remain in process before timing out. Requests that time out can be resubmitted as needed.

  

``--acceptance-timeout-seconds`` (integer)


  Length of time (in seconds) to wait for players to accept a proposed match. If any player rejects the match or fails to accept before the timeout, the ticket continues to look for an acceptable match.

  

``--acceptance-required`` | ``--no-acceptance-required`` (boolean)


  Flag that determines whether or not a match that was created with this configuration must be accepted by the matched players. To require acceptance, set to TRUE.

  

``--rule-set-name`` (string)


  Unique identifier for a matchmaking rule set to use with this configuration. A matchmaking configuration can only use rule sets that are defined in the same region.

  

``--notification-target`` (string)


  SNS topic ARN that is set up to receive matchmaking notifications.

  

``--additional-player-count`` (integer)


  Number of player slots in a match to keep open for future players. For example, if the configuration's rule set specifies a match for a single 12-person team, and the additional player count is set to 2, only 10 players are selected for the match.

  

``--custom-event-data`` (string)


  Information to attached to all events related to the matchmaking configuration. 

  

``--game-properties`` (list)


  Set of custom properties for a game session, formatted as key:value pairs. These properties are passed to a game server process in the  GameSession object with a request to start a new game session (see `Start a Game Session <http://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-startsession>`__ ). This information is added to the new  GameSession object that is created for a successful match. 

  



Shorthand Syntax::

    Key=string,Value=string ...




JSON Syntax::

  [
    {
      "Key": "string",
      "Value": "string"
    }
    ...
  ]



``--game-session-data`` (string)


  Set of custom game session properties, formatted as a single string value. This data is passed to a game server process in the  GameSession object with a request to start a new game session (see `Start a Game Session <http://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-startsession>`__ ). This information is added to the new  GameSession object that is created for a successful match.

  

``--cli-input-json`` (string)
Performs service operation based on the JSON string provided. The JSON string follows the format provided by ``--generate-cli-skeleton``. If other arguments are provided on the command line, the CLI values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally.

``--generate-cli-skeleton`` (string)
Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value ``input``, prints a sample input JSON that can be used as an argument for ``--cli-input-json``. If provided with the value ``output``, it validates the command inputs and returns a sample output JSON for that command.


See :doc:`'aws help' </reference/index>` for descriptions of global parameters.


======
Output
======

Configuration -> (structure)

  

  Object that describes the newly created matchmaking configuration.

  

  Name -> (string)

    

    Unique identifier for a matchmaking configuration. This name is used to identify the configuration associated with a matchmaking request or ticket.

    

    

  Description -> (string)

    

    Descriptive label that is associated with matchmaking configuration.

    

    

  GameSessionQueueArns -> (list)

    

    Amazon Resource Name (`ARN <http://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html>`__ ) that is assigned to a game session queue and uniquely identifies it. Format is ``arn:aws:gamelift:<region>::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912`` . These queues are used when placing game sessions for matches that are created with this matchmaking configuration. Queues can be located in any region.

    

    (string)

      

      

    

  RequestTimeoutSeconds -> (integer)

    

    Maximum duration, in seconds, that a matchmaking ticket can remain in process before timing out. Requests that time out can be resubmitted as needed.

    

    

  AcceptanceTimeoutSeconds -> (integer)

    

    Length of time (in seconds) to wait for players to accept a proposed match. If any player rejects the match or fails to accept before the timeout, the ticket continues to look for an acceptable match.

    

    

  AcceptanceRequired -> (boolean)

    

    Flag that determines whether or not a match that was created with this configuration must be accepted by the matched players. To require acceptance, set to TRUE.

    

    

  RuleSetName -> (string)

    

    Unique identifier for a matchmaking rule set to use with this configuration. A matchmaking configuration can only use rule sets that are defined in the same region.

    

    

  NotificationTarget -> (string)

    

    SNS topic ARN that is set up to receive matchmaking notifications.

    

    

  AdditionalPlayerCount -> (integer)

    

    Number of player slots in a match to keep open for future players. For example, if the configuration's rule set specifies a match for a single 12-person team, and the additional player count is set to 2, only 10 players are selected for the match.

    

    

  CustomEventData -> (string)

    

    Information to attached to all events related to the matchmaking configuration. 

    

    

  CreationTime -> (timestamp)

    

    Time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").

    

    

  GameProperties -> (list)

    

    Set of custom properties for a game session, formatted as key:value pairs. These properties are passed to a game server process in the  GameSession object with a request to start a new game session (see `Start a Game Session <http://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-startsession>`__ ). This information is added to the new  GameSession object that is created for a successful match. 

    

    (structure)

      

      Set of key-value pairs that contain information about a game session. When included in a game session request, these properties communicate details to be used when setting up the new game session, such as to specify a game mode, level, or map. Game properties are passed to the game server process when initiating a new game session; the server process uses the properties as appropriate. For more information, see the `Amazon GameLift Developer Guide <http://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-client-api.html#gamelift-sdk-client-api-create>`__ .

      

      Key -> (string)

        

        Game property identifier.

        

        

      Value -> (string)

        

        Game property value.

        

        

      

    

  GameSessionData -> (string)

    

    Set of custom game session properties, formatted as a single string value. This data is passed to a game server process in the  GameSession object with a request to start a new game session (see `Start a Game Session <http://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-startsession>`__ ). This information is added to the new  GameSession object that is created for a successful match. 

    

    

  

