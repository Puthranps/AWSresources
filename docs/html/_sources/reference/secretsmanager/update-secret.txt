[ :ref:`aws <cli:aws>` . :ref:`secretsmanager <cli:aws secretsmanager>` ]

.. _cli:aws secretsmanager update-secret:


*************
update-secret
*************



===========
Description
===========



Modifies many of the details of the specified secret. If you include a ``ClientRequestToken`` and *either*  ``SecretString`` or ``SecretBinary`` then it also creates a new version attached to the secret.

 

To modify the rotation configuration of a secret, use  RotateSecret instead.

 

.. note::

   

  The Secrets Manager console uses only the ``SecretString`` parameter and therefore limits you to encrypting and storing only a text string. To encrypt and store binary data as part of the version of a secret, you must use either the AWS CLI or one of the AWS SDKs.

   

 

 
* If a version with a ``VersionId`` with the same value as the ``ClientRequestToken`` parameter already exists, the operation results in an error. You cannot modify an existing version, you can only create a new version. 
 
* If you include ``SecretString`` or ``SecretBinary`` to create a new secret version, Secrets Manager automatically attaches the staging label ``AWSCURRENT`` to the new version.  
 

 

.. note::

   

   
  * If you call an operation that needs to encrypt or decrypt the ``SecretString`` or ``SecretBinary`` for a secret in the same account as the calling user and that secret doesn't specify a AWS KMS encryption key, Secrets Manager uses the account's default AWS managed customer master key (CMK) with the alias ``aws/secretsmanager`` . If this key doesn't already exist in your account then Secrets Manager creates it for you automatically. All users in the same AWS account automatically have access to use the default CMK. Note that if an Secrets Manager API call results in AWS having to create the account's AWS-managed CMK, it can result in a one-time significant delay in returning the result. 
   
  * If the secret is in a different AWS account from the credentials calling an API that requires encryption or decryption of the secret value then you must create and use a custom AWS KMS CMK because you can't access the default CMK for the account using credentials from a different AWS account. Store the ARN of the CMK in the secret when you create the secret or when you update it by including it in the ``KMSKeyId`` . If you call an API that must encrypt or decrypt ``SecretString`` or ``SecretBinary`` using credentials from a different account then the AWS KMS key policy must grant cross-account access to that other account's user or role for both the kms:GenerateDataKey and kms:Decrypt operations. 
   

   

 

 **Minimum permissions**  

 

To run this command, you must have the following permissions:

 

 
* secretsmanager:UpdateSecret 
 
* kms:GenerateDataKey - needed only if you use a custom AWS KMS key to encrypt the secret. You do not need this permission to use the account's AWS managed CMK for Secrets Manager. 
 
* kms:Decrypt - needed only if you use a custom AWS KMS key to encrypt the secret. You do not need this permission to use the account's AWS managed CMK for Secrets Manager. 
 

 

 **Related operations**  

 

 
* To create a new secret, use  CreateSecret . 
 
* To add only a new version to an existing secret, use  PutSecretValue . 
 
* To get the details for a secret, use  DescribeSecret . 
 
* To list the versions contained in a secret, use  ListSecretVersionIds . 
 



See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/secretsmanager-2017-10-17/UpdateSecret>`_

See :doc:`'aws help' </reference/index>` for descriptions of global parameters.


========
Synopsis
========

::

    update-secret
  --secret-id <value>
  [--client-request-token <value>]
  [--description <value>]
  [--kms-key-id <value>]
  [--secret-binary <value>]
  [--secret-string <value>]
  [--cli-input-json <value>]
  [--generate-cli-skeleton <value>]




=======
Options
=======

``--secret-id`` (string)


  Specifies the secret that you want to modify or to which you want to add a new version. You can specify either the Amazon Resource Name (ARN) or the friendly name of the secret.

   

  .. note::

     

    If you specify an ARN, we generally recommend that you specify a complete ARN. You can specify a partial ARN too—for example, if you don’t include the final hyphen and six random characters that Secrets Manager adds at the end of the ARN when you created the secret. A partial ARN match can work as long as it uniquely matches only one secret. However, if your secret has a name that ends in a hyphen followed by six characters (before Secrets Manager adds the hyphen and six characters to the ARN) and you try to use that as a partial ARN, then those characters cause Secrets Manager to assume that you’re specifying a complete ARN. This confusion can cause unexpected results. To avoid this situation, we recommend that you don’t create secret names that end with a hyphen followed by six characters.

     

  

``--client-request-token`` (string)


  (Optional) If you want to add a new version to the secret, this parameter specifies a unique identifier for the new version that helps ensure idempotency. 

   

  If you use the AWS CLI or one of the AWS SDK to call this operation, then you can leave this parameter empty. The CLI or SDK generates a random UUID for you and includes that in the request. If you don't use the SDK and instead generate a raw HTTP request to the Secrets Manager service endpoint, then you must generate a ``ClientRequestToken`` yourself for new versions and include that value in the request.

   

  You typically only need to interact with this value if you implement your own retry logic and want to ensure that a given secret is not created twice. We recommend that you generate a `UUID-type <https://wikipedia.org/wiki/Universally_unique_identifier>`__ value to ensure uniqueness within the specified secret. 

   

  Secrets Manager uses this value to prevent the accidental creation of duplicate versions if there are failures and retries during the Lambda rotation function's processing.

   

   
  * If the ``ClientRequestToken`` value isn't already associated with a version of the secret then a new version of the secret is created.  
   
  * If a version with this value already exists and that version's ``SecretString`` and ``SecretBinary`` values are the same as those in the request then the request is ignored (the operation is idempotent).  
   
  * If a version with this value already exists and that version's ``SecretString`` and ``SecretBinary`` values are different from the request then an error occurs because you cannot modify an existing secret value. 
   

   

  This value becomes the ``VersionId`` of the new version.

  

``--description`` (string)


  (Optional) Specifies an updated user-provided description of the secret.

  

``--kms-key-id`` (string)


  (Optional) Specifies an updated ARN or alias of the AWS KMS customer master key (CMK) to be used to encrypt the protected text in new versions of this secret.

   

  .. warning::

     

    You can only use the account's default CMK to encrypt and decrypt if you call this operation using credentials from the same account that owns the secret. If the secret is in a different account, then you must create a custom CMK and provide the ARN of that CMK in this field. The user making the call must have permissions to both the secret and the CMK in their respective accounts.

     

  

``--secret-binary`` (blob)


  (Optional) Specifies updated binary data that you want to encrypt and store in the new version of the secret. To use this parameter in the command-line tools, we recommend that you store your binary data in a file and then use the appropriate technique for your tool to pass the contents of the file as a parameter. Either ``SecretBinary`` or ``SecretString`` must have a value, but not both. They cannot both be empty.

   

  This parameter is not accessible using the Secrets Manager console.

  

``--secret-string`` (string)


  (Optional) Specifies updated text data that you want to encrypt and store in this new version of the secret. Either ``SecretBinary`` or ``SecretString`` must have a value, but not both. They cannot both be empty.

   

  If you create this secret by using the Secrets Manager console then Secrets Manager puts the protected secret text in only the ``SecretString`` parameter. The Secrets Manager console stores the information as a JSON structure of key/value pairs that the default Lambda rotation function knows how to parse.

   

  For storing multiple values, we recommend that you use a JSON text string argument and specify key/value pairs. For information on how to format a JSON parameter for the various command line tool environments, see `Using JSON for Parameters <http://docs.aws.amazon.com/cli/latest/userguide/cli-using-param.html#cli-using-param-json>`__ in the *AWS CLI User Guide* . For example:

   

   ``[{"username":"bob"},{"password":"abc123xyz456"}]``  

   

  If your command-line tool or SDK requires quotation marks around the parameter, you should use single quotes to avoid confusion with the double quotes required in the JSON text. You can also 'escape' the double quote character in the embedded JSON text by prefacing each with a backslash. For example, the following string is surrounded by double-quotes. All of the embedded double quotes are escaped:

   

   ``"[{\"username\":\"bob\"},{\"password\":\"abc123xyz456\"}]"``  

  

``--cli-input-json`` (string)
Performs service operation based on the JSON string provided. The JSON string follows the format provided by ``--generate-cli-skeleton``. If other arguments are provided on the command line, the CLI values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally.

``--generate-cli-skeleton`` (string)
Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value ``input``, prints a sample input JSON that can be used as an argument for ``--cli-input-json``. If provided with the value ``output``, it validates the command inputs and returns a sample output JSON for that command.


See :doc:`'aws help' </reference/index>` for descriptions of global parameters.


========
Examples
========

The following examples show how to modify individual components of the secret. Alternatively, you can combine all of the parameters into a single command to do them all in one operation.

**To update the description of a secret**

The following example shows how to modify the description of a secret. ::

	aws secretsmanager update-secret --secret-id MyTestDatabaseSecret \
	  --description "This is a new description for the secret."

The output shows the following: ::

	{
	  "ARN": "arn:aws:secretsmanager:us-west-2:123456789012:secret:MyTestDatabaseSecret-a1b2c3",
	  "Name": "MyTestDatabaseSecret"
	}

**To update the KMS key associated with a secret**
	
This example shows how to update the KMS customer managed key (CMK) used to encrypt the secret value. The KMS CMK must be in the same region as the secret. ::

	aws secretsmanager update-secret --secret-id MyTestDatabaseSecret \
	  --kms-key-id arn:aws:kms:us-west-2:123456789012:key/EXAMPLE1-90ab-cdef-fedc-ba987EXAMPLE

The output shows the following: ::

	{
	  "ARN": "arn:aws:secretsmanager:us-west-2:123456789012:secret:MyTestDatabaseSecret-a1b2c3",
	  "Name": "MyTestDatabaseSecret"
	}

**To create a new version of the encrypted secret value**

The following example shows how to create a new version of the secret by updating the --secret-string field. The secret string is read from the contents of the specified file. Alternatively, you can use the put-secret-value operation. ::

	aws secretsmanager update-secret --secret-id MyTestDatabaseSecret \
	  --secret-string file://mycreds.json

The output shows the following, including the ``VersionId`` of the new secret version: ::

	{
	  "ARN": "aws:arn:secretsmanager:us-west-2:123456789012:secret:MyTestDatabaseSecret-a1b2c3",
	  "Name": "MyTestDatabaseSecret",
	  "VersionId": "EXAMPLE1-90ab-cdef-fedc-ba987EXAMPLE"
	}	

======
Output
======

ARN -> (string)

  

  The ARN of the secret that was updated.

   

  .. note::

     

    Secrets Manager automatically adds several random characters to the name at the end of the ARN when you initially create a secret. This affects only the ARN and not the actual friendly name. This ensures that if you create a new secret with the same name as an old secret that you previously deleted, then users with access to the old secret *don't* automatically get access to the new secret because the ARNs are different.

     

  

  

Name -> (string)

  

  The friendly name of the secret that was updated.

  

  

VersionId -> (string)

  

  If a new version of the secret was created by this operation, then ``VersionId`` contains the unique identifier of the new version.

  

  

